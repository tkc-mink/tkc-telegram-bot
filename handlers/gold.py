# handlers/gold.py
# -*- coding: utf-8 -*-
from __future__ import annotations
from typing import Dict, Any

from utils.message_utils import send_message, send_typing_action
from utils.gold_utils import get_gold_price

def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _looks_html(s: str) -> bool:
    if not s:
        return False
    # ‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ: ‡∏°‡∏µ‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏±‡∏ô
    return ("</" in s) or ("<b>" in s) or ("<i>" in s) or ("<code>" in s) or ("<br" in s)

def _format_dict_payload(d: Dict[str, Any]) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏á dict ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° HTML ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö key ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô 'bar_buy', 'bar_sell', 'ornament_buy', 'ornament_sell', 'updated'
    ‡∏ñ‡πâ‡∏≤ key ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡∏Å‡πá‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà key:value ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    if not d:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á"

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
    bar_buy  = d.get("bar_buy") or d.get("bar_buy_price")
    bar_sell = d.get("bar_sell") or d.get("bar_sell_price")
    or_buy   = d.get("ornament_buy") or d.get("ornament_buy_price")
    or_sell  = d.get("ornament_sell") or d.get("ornament_sell_price")
    updated  = d.get("updated") or d.get("updated_at") or d.get("time")

    lines = ["üìä <b>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b>"]
    had_any = False
    if bar_buy or bar_sell:
        lines.append(f"‚Ä¢ ‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á: ‡∏ã‡∏∑‡πâ‡∏≠ <b>{_html_escape(str(bar_buy or '-'))}</b> / ‡∏Ç‡∏≤‡∏¢ <b>{_html_escape(str(bar_sell or '-'))}</b>")
        had_any = True
    if or_buy or or_sell:
        lines.append(f"‚Ä¢ ‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì: ‡∏ã‡∏∑‡πâ‡∏≠ <b>{_html_escape(str(or_buy or '-'))}</b> / ‡∏Ç‡∏≤‡∏¢ <b>{_html_escape(str(or_sell or '-'))}</b>")
        had_any = True
    if updated:
        lines.append(f"üïí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: <code>{_html_escape(str(updated))}</code>")

    if had_any:
        return "\n".join(lines)

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Ñ‡∏™‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡πÉ‡∏´‡πâ dump ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà key:value ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    lines.append("")
    for k, v in d.items():
        lines.append(f"‚Ä¢ <code>{_html_escape(str(k))}</code>: {_html_escape(str(v))}")
    return "\n".join(lines)

def handle_gold(user_info: Dict[str, Any], user_text: str) -> None:
    """
    ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö main_handler): ‡∏£‡∏±‡∏ö user_info, user_text
    - ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
    - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å get_gold_price()
    - ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö HTML ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    """
    chat_id = user_info["profile"]["user_id"]

    try:
        send_typing_action(chat_id, "typing")

        data = get_gold_price()

        if isinstance(data, dict):
            msg = _format_dict_payload(data)
            send_message(chat_id, msg, parse_mode="HTML")
            return

        # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if isinstance(data, str):
            s = data.strip()
            if not s:
                send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
                return

            # ‡∏ñ‡πâ‡∏≤‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á; ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô escape
            if _looks_html(s):
                send_message(chat_id, s, parse_mode="HTML")
            else:
                send_message(chat_id, f"üìä <b>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b>\n{_html_escape(s)}", parse_mode="HTML")
            return

        # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
    except Exception as e:
        print(f"[handle_gold] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")

# (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ chat_id ‡∏ï‡∏£‡∏á ‡πÜ
def handle_gold_legacy(chat_id: int | str, user_text: str) -> None:
    try:
        send_typing_action(chat_id, "typing")
        data = get_gold_price()
        if isinstance(data, dict):
            send_message(chat_id, _format_dict_payload(data), parse_mode="HTML")
        elif isinstance(data, str):
            s = data.strip()
            if not s:
                send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
            elif _looks_html(s):
                send_message(chat_id, s, parse_mode="HTML")
            else:
                send_message(chat_id, f"üìä <b>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</b>\n{_html_escape(s)}", parse_mode="HTML")
        else:
            send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
    except Exception as e:
        print(f"[handle_gold_legacy] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")
