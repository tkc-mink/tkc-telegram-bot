# handlers/main_handler.py
# -*- coding: utf-8 -*-
"""
Dispatch ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å Telegram (‡∏ú‡πà‡∏≤‡∏ô Flask webhook) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á handler ‡∏¢‡πà‡∏≠‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
"""
from typing import Dict, Any
import traceback

# ========= Feature Handlers =========
from handlers.history  import handle_history
from handlers.review   import handle_review
from handlers.weather  import handle_weather
from handlers.doc      import handle_doc
from handlers.image    import handle_image
from handlers.gold     import handle_gold
from handlers.lottery  import handle_lottery
from handlers.stock    import handle_stock
from handlers.crypto   import handle_crypto
from handlers.oil      import handle_oil
# from handlers.news     import handle_news # (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡∏≠‡∏¢‡πà‡∏≤ import)

# ========= Utils =========
from utils.message_utils import send_message, ask_for_location
from utils.context_utils import update_location   # ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á location

# ========= AI Function Calling =========
from function_calling import process_with_function_calling

def handle_message(data: Dict[str, Any]) -> None:
    chat_id = None
    try:
        msg: Dict[str, Any] = data.get("message", {}) or {}
        chat = msg.get("chat") or {}
        chat_id = chat.get("id")
        if chat_id is None:
            return

        # ---- ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ----
        user_text: str = (msg.get("caption") or msg.get("text") or "").strip()
        user_text_low = user_text.lower()

        # 1) Document
        if msg.get("document"):
            handle_doc(chat_id, msg)
            return

        # 2) Location
        if msg.get("location"):
            _handle_location_message(chat_id, msg)
            return

        # 3) ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if not user_text:
            send_message(chat_id, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ /help")
            return

        # 4) Dispatch ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á/‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
        if user_text_low.startswith("/my_history"):
            handle_history(chat_id, user_text)

        elif user_text_low.startswith("/gold") or "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á" in user_text_low:
            handle_gold(chat_id, user_text)

        elif user_text_low.startswith("/lottery"):
            handle_lottery(chat_id, user_text)

        elif user_text_low.startswith("/stock"):
            handle_stock(chat_id, user_text)

        elif user_text_low.startswith("/crypto"):
            handle_crypto(chat_id, user_text)

        elif user_text_low.startswith("/oil"):
            handle_oil(chat_id, user_text)

        elif user_text_low.startswith("/weather") or "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®" in user_text_low:
            handle_weather(chat_id, user_text)

        elif "‡∏Ç‡∏≠‡∏£‡∏π‡∏õ" in user_text_low or user_text_low.startswith("/image"):
            handle_image(chat_id, user_text)

        elif user_text_low.startswith("/review"):
            handle_review(chat_id, user_text)

        # elif user_text_low.startswith("/news"):
        #     handle_news(chat_id, user_text)

        elif user_text_low.startswith("/start") or user_text_low.startswith("/help"):
            _send_help(chat_id)

        else:
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏´‡πâ AI (GPT) ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
            reply = process_with_function_calling(user_text)
            send_message(chat_id, reply)

    except Exception as e:
        # ‡∏™‡πà‡∏á error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤ chat_id ‡∏¢‡∏±‡∏á‡∏°‡∏µ) ‡πÅ‡∏•‡∏∞ log stacktrace
        if chat_id is not None:
            try:
                send_message(chat_id, f"‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: {e}")
            except Exception:
                pass
        print("[MAIN_HANDLER ERROR]")
        print(traceback.format_exc())

# ---------------------------------------------------------------------------
# Helper functions
# ---------------------------------------------------------------------------

def _handle_location_message(chat_id: int, msg: Dict[str, Any]) -> None:
    loc = msg.get("location", {})
    lat, lon = loc.get("latitude"), loc.get("longitude")
    if lat is not None and lon is not None:
        update_location(str(chat_id), lat, lon)
        send_message(chat_id, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ (/weather)")
    else:
        send_message(chat_id, "‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà")

def _send_help(chat_id: int) -> None:
    send_message(
        chat_id,
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà TKC Bot ü¶ä\n\n"
        "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n"
        "‚Ä¢ /my_history   ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n"
        "‚Ä¢ /gold          ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
        "‚Ä¢ /lottery       ‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n"
        "‚Ä¢ /stock <SYM>   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô /stock AAPL\n"
        "‚Ä¢ /crypto <SYM>  ‡∏£‡∏≤‡∏Ñ‡∏≤ Crypto ‡πÄ‡∏ä‡πà‡∏ô /crypto BTC\n"
        "‚Ä¢ /oil           ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÇ‡∏•‡∏Å\n"
        "‚Ä¢ /weather       ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏£‡πå location ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏° üìç)\n"
        "‚Ä¢ /review        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏≠‡∏ó (1-5)\n"
        "‚Ä¢ ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF/Word/Excel/PPT/TXT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ\n"
        "‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ç‡∏≠‡∏£‡∏π‡∏õ ...' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ\n"
        "\n‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á"
    )
