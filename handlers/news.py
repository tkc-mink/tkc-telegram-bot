# handlers/news.py
# -*- coding: utf-8 -*-
"""
Handler for fetching and displaying the latest news (Thai/any topic).
Stable version:
- ‡πÉ‡∏ä‡πâ utils.message_utils (retry/auto-chunk/no-echo)
- parse_mode=HTML ‡∏û‡∏£‡πâ‡∏≠‡∏° escape ‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å utils.news_utils.get_news() ‡∏ó‡∏±‡πâ‡∏á str / dict / list[dict]
- ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠, ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà, ‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
"""
from __future__ import annotations
from typing import Dict, Any, List, Iterable
import re

from utils.message_utils import send_message, send_typing_action
from utils.news_utils import get_news


# ===== Helpers =====
def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _looks_html(s: str) -> bool:
    if not s:
        return False
    return ("</" in s) or ("<b>" in s) or ("<i>" in s) or ("<code>" in s) or ("<a " in s) or ("<br" in s)

def _parse_topic_and_limit(user_text: str) -> tuple[str, int]:
    """
    ‡πÅ‡∏¢‡∏Å topic ‡πÅ‡∏•‡∏∞ limit ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô:
    - "/news" ‚Üí ("‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", 8)
    - "/news ‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÑ‡∏ó‡∏¢" ‚Üí ("‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÑ‡∏ó‡∏¢", 8)
    - "/news AI 5" ‚Üí ("AI", 5)
    - ‡∏ñ‡πâ‡∏≤ limit ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠ <=0 ‚Üí ‡πÉ‡∏ä‡πâ 8
    """
    default_topic = "‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
    default_limit = 8

    text = (user_text or "").strip()
    if not text:
        return (default_topic, default_limit)

    parts = text.split(maxsplit=1)
    if not parts:
        return (default_topic, default_limit)

    # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /news ‡∏≠‡∏≠‡∏Å
    if parts[0].lower().startswith("/news"):
        rest = parts[1].strip() if len(parts) > 1 else ""
    else:
        rest = text

    if not rest:
        return (default_topic, default_limit)

    # ‡∏à‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô "AI 5"
    m = re.match(r"^(.*\S)\s+(\d{1,2})$", rest)
    if m:
        topic = m.group(1).strip()
        try:
            lim = int(m.group(2))
            if lim <= 0:
                lim = default_limit
        except Exception:
            lim = default_limit
        return (topic or default_topic, min(lim, 12))  # ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô

    return (rest, default_limit)

def _first_present(d: Dict[str, Any], keys: Iterable[str]) -> Any:
    for k in keys:
        if k in d and d[k] not in (None, ""):
            return d[k]
    return None

def _format_article_item(item: Dict[str, Any]) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πà‡∏≤‡∏ß 1 ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á HTML ‡∏™‡∏ß‡∏¢ ‡πÜ:
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°: title, url, link, source, publisher, published_at, time, summary
    """
    title = _first_present(item, ("title", "headline", "name")) or "-"
    url   = _first_present(item, ("url", "link"))
    src   = _first_present(item, ("source", "publisher", "site"))
    when  = _first_present(item, ("published_at", "published", "date", "time"))
    summ  = _first_present(item, ("summary", "description"))

    title_html = _html_escape(str(title))
    if url:
        url_s = str(url).strip()
        # Telegram HTML link
        title_html = f'<a href="{_html_escape(url_s)}">{title_html}</a>'

    lines = [f"‚Ä¢ {title_html}"]
    meta_bits: List[str] = []
    if src:
        meta_bits.append(_html_escape(str(src)))
    if when:
        meta_bits.append(_html_escape(str(when)))
    if meta_bits:
        lines.append("   " + " ¬∑ ".join(meta_bits))
    if summ:
        lines.append("   " + _html_escape(str(summ)))
    return "\n".join(lines)

def _format_list_payload(items: List[Dict[str, Any]], topic_label: str) -> str:
    if not items:
        return f"üóûÔ∏è <b>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠</b> <code>{_html_escape(topic_label)}</code> ‡∏Ñ‡∏£‡∏±‡∏ö"

    header = f"üóûÔ∏è <b>‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</b> ‚Äî <code>{_html_escape(topic_label)}</code>\n"
    body_lines: List[str] = []
    for it in items:
        try:
            body_lines.append(_format_article_item(it))
        except Exception:
            # Fallback: dump key:value ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô
            kv = " ".join(f"<code>{_html_escape(str(k))}</code>={_html_escape(str(v))}" for k, v in list(it.items())[:6])
            body_lines.append(f"‚Ä¢ {kv}")
    return header + "\n".join(body_lines)

def _to_item_list(payload: Any) -> List[Dict[str, Any]] | None:
    """
    ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô list[dict] ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:
    - list[dict] ‚Üí OK
    - dict{ 'items': list } ‚Üí OK
    - ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‚Üí None
    """
    if isinstance(payload, list):
        # ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á dict
        return [x for x in payload if isinstance(x, dict)]
    if isinstance(payload, dict):
        items = payload.get("items")
        if isinstance(items, list):
            return [x for x in items if isinstance(x, dict)]
    return None


# ===== Main Handler =====
def handle_news(user_info: Dict[str, Any], user_text: str) -> None:
    """
    Parses the news topic from user text, fetches news via utils.news_utils.get_news, and sends.
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
    - /news
    - /news ‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÑ‡∏ó‡∏¢
    - /news AI 5   (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πà‡∏≤‡∏ß 5 ‡∏ä‡∏¥‡πâ‡∏ô)
    """
    chat_id = user_info["profile"]["user_id"]
    user_name = user_info["profile"].get("first_name") or ""

    try:
        # 1) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå topic + limit
        topic, limit = _parse_topic_and_limit(user_text)

        # 2) ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        send_typing_action(chat_id, "typing")
        send_message(chat_id, f"üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ <code>{_html_escape(topic)}</code> ‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶", parse_mode="HTML")

        # 3) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å utility ‚Äî ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á signature ‡πÉ‡∏´‡∏°‡πà/‡πÄ‡∏Å‡πà‡∏≤
        try:
            data = get_news(topic, limit=limit)  # type: ignore[arg-type]
        except TypeError:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà topic
            data = get_news(topic)

        # 4) ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        # 4.1 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô list/dict (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πà‡∏≤‡∏ß)
        items = _to_item_list(data)
        if items is not None:
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ util ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞)
            items = items[:max(1, min(limit, 12))]
            msg = _format_list_payload(items, topic_label=topic)
            send_message(chat_id, msg, parse_mode="HTML")
            return

        # 4.2 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if isinstance(data, str):
            s = data.strip()
            if not s:
                send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", parse_mode="HTML")
                return
            if _looks_html(s):
                send_message(chat_id, s, parse_mode="HTML")
            else:
                send_message(
                    chat_id,
                    f"üóûÔ∏è <b>‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</b> ‚Äî <code>{_html_escape(topic)}</code>\n\n{_html_escape(s)}",
                    parse_mode="HTML",
                )
            return

        # 4.3 ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", parse_mode="HTML")

    except Exception as e:
        print(f"[handle_news] ERROR: {e}")
        send_message(chat_id, f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {_html_escape(user_name)}, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
