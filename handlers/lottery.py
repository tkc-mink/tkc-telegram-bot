# handlers/lottery.py
# -*- coding: utf-8 -*-
"""
Handler for fetching the latest lottery results (Thai Government Lottery).
Stable version: message_utils (retry/auto-chunk/no-echo), HTML-safe formatting,
and robust handling for both string and dict payloads from utils.lottery_utils.
"""
from __future__ import annotations
from typing import Dict, Any, Iterable

from utils.message_utils import send_message, send_typing_action
from utils.lottery_utils import get_lottery_result


# ===== Helpers =====
def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _looks_html(s: str) -> bool:
    if not s:
        return False
    return ("</" in s) or ("<b>" in s) or ("<i>" in s) or ("<code>" in s) or ("<br" in s)

def _fmt_numbers(val: Any) -> str:
    """‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô str / list / tuple ‚Üí ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏ß‡∏¢ ‡πÜ (HTML escaped)"""
    if val is None:
        return "-"
    if isinstance(val, (list, tuple, set)):
        return ", ".join(_html_escape(str(x)) for x in val)
    return _html_escape(str(val))

def _first_present(d: Dict[str, Any], keys: Iterable[str]) -> Any:
    for k in keys:
        if k in d and d[k] not in (None, ""):
            return d[k]
    return None

def _format_dict_payload(d: Dict[str, Any]) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏á dict ‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° HTML ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô:
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° ‡πÄ‡∏ä‡πà‡∏ô:
      - draw_date/date/period
      - prize_first/first_prize
      - front3/three_front/first3
      - back3/three_back/last3
      - last2/two_back
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ key:value ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    if not d:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å"

    date_val = _first_present(d, ("draw_date", "date", "period", "issue", "updated", "updated_at", "time"))
    first     = _first_present(d, ("prize_first", "first_prize", "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà1", "prize_1"))
    front3    = _first_present(d, ("front3", "three_front", "front_3", "‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤3‡∏ï‡∏±‡∏ß"))
    back3     = _first_present(d, ("back3", "three_back", "back_3", "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢3‡∏ï‡∏±‡∏ß"))
    last2     = _first_present(d, ("last2", "two_back", "back_2", "‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢2‡∏ï‡∏±‡∏ß"))

    lines = ["üé´ <b>‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</b>"]
    if date_val:
        lines.append(f"üóìÔ∏è ‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: <code>{_html_escape(str(date_val))}</code>")

    had_any = False
    if first is not None:
        lines.append(f"‚Ä¢ ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: <b>{_fmt_numbers(first)}</b>")
        had_any = True
    if front3 is not None:
        lines.append(f"‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ 3 ‡∏ï‡∏±‡∏ß: <b>{_fmt_numbers(front3)}</b>")
        had_any = True
    if back3 is not None:
        lines.append(f"‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß: <b>{_fmt_numbers(back3)}</b>")
        had_any = True
    if last2 is not None:
        lines.append(f"‚Ä¢ ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß: <b>{_fmt_numbers(last2)}</b>")
        had_any = True

    if had_any:
        return "\n".join(lines)

    # Fallback: dump ‡∏ó‡∏∏‡∏Å key:value ‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Ñ‡∏≤‡∏î)
    lines.append("")
    for k, v in d.items():
        lines.append(f"‚Ä¢ <code>{_html_escape(str(k))}</code>: {_fmt_numbers(v)}")
    return "\n".join(lines)


# ===== Main Handler =====
def handle_lottery(user_info: Dict[str, Any], user_text: str) -> None:
    """
    ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö main_handler:
    - ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
    - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å get_lottery_result() (‡∏î‡∏∂‡∏á '‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' ‡πÄ‡∏™‡∏°‡∏≠)
    - ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö HTML ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    """
    chat_id = user_info["profile"]["user_id"]
    user_name = user_info["profile"].get("first_name") or ""

    try:
        # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        send_typing_action(chat_id, "typing")
        send_message(chat_id, "üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶")

        data = get_lottery_result()

        # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö dict ‚Üí ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏™‡∏ß‡∏¢ ‡πÜ
        if isinstance(data, dict):
            msg = _format_dict_payload(data)
            send_message(chat_id, msg, parse_mode="HTML")
            return

        # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö str ‚Üí ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô HTML ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô escape ‡πÅ‡∏•‡∏∞‡∏´‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
        if isinstance(data, str):
            s = data.strip()
            if not s:
                send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", parse_mode="HTML")
                return
            if _looks_html(s):
                send_message(chat_id, s, parse_mode="HTML")
            else:
                send_message(chat_id, f"üé´ <b>‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</b>\n\n{_html_escape(s)}", parse_mode="HTML")
            return

        # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
        send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", parse_mode="HTML")

    except Exception as e:
        print(f"[handle_lottery] ERROR: {e}")
        send_message(chat_id, f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {_html_escape(user_name)}, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")


# (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ chat_id ‡∏ï‡∏£‡∏á ‡πÜ
def handle_lottery_legacy(chat_id: int | str, user_text: str) -> None:
    try:
        send_typing_action(chat_id, "typing")
        send_message(chat_id, "üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶")
        data = get_lottery_result()
        if isinstance(data, dict):
            send_message(chat_id, _format_dict_payload(data), parse_mode="HTML")
        elif isinstance(data, str):
            s = data.strip()
            if not s:
                send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", parse_mode="HTML")
            elif _looks_html(s):
                send_message(chat_id, s, parse_mode="HTML")
            else:
                send_message(chat_id, f"üé´ <b>‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</b>\n\n{_html_escape(s)}", parse_mode="HTML")
        else:
            send_message(chat_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", parse_mode="HTML")
    except Exception as e:
        print(f"[handle_lottery_legacy] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
