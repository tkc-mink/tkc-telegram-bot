# handlers/image.py
# -*- coding: utf-8 -*-
"""
р╕гр╕нр╕Зр╕гр╕▒р╕Ъ 2 р╣Вр╕лр╕бр╕Фр╕лр╕ер╕▒р╕Б:
1) р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Ю (Vision): р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю + (р╣Бр╕Др╕Ыр╕Кр╕▒р╕Щр╣Ар╕кр╕гр╕┤р╕бр╣Др╕Фр╣Й)
2) р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Ю (Image Gen): р╕Др╕│р╕кр╕▒р╣Ир╕З /imagine <prompt>

р╕лр╕бр╕▓р╕вр╣Ар╕лр╕Хр╕╕:
- р╕Бр╕▓р╕гр╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╕Бр╕ер╕▒р╕Ър╣Др╕Ы Telegram р╕Фр╣Йр╕зр╕вр╣Др╕Ър╕Хр╣М р╕Хр╣Йр╕нр╕Зр╣Гр╕Кр╣Й multipart/form-data
- р╣Гр╕Кр╣Й get_telegram_token() р╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣Мр╣Вр╕Фр╕вр╕Хр╕гр╕З
"""

from __future__ import annotations
import os
import base64
import requests
from typing import Optional

from utils.message_utils import send_message, send_photo, get_telegram_token
from utils.telegram_file_utils import download_telegram_file
from utils.openai_client import client  # client р╕Бр╕ер╕▓р╕З (no proxies)
from utils.telegram_api import send_chat_action

# ENV р╕Хр╕▒р╣Йр╕Зр╕Кр╕╖р╣Ир╕нр╣Вр╕бр╣Ар╕Фр╕ер╕Ьр╣Ир╕▓р╕Щ OPENAI_MODEL_VISION / OPENAI_MODEL_IMAGE р╣Др╕Фр╣Й
VISION_MODEL = os.getenv("OPENAI_MODEL_VISION", "gpt-4o-mini")
IMAGE_MODEL  = os.getenv("OPENAI_MODEL_IMAGE", "gpt-image-1")
IMAGE_SIZE   = os.getenv("OPENAI_IMAGE_SIZE", "1024x1024")


# ---------- helpers ----------
def _file_to_data_url(path: str) -> str:
    """р╣Бр╕Ыр╕ер╕Зр╣Др╕Яр╕ер╣Мр╕гр╕╣р╕Ыр╣Ар╕Ыр╣Зр╕Щ data URL (base64) р╕кр╕│р╕лр╕гр╕▒р╕Ъ vision"""
    with open(path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")
    # р╣Ар╕Фр╕▓ mime р╣Бр╕Ър╕Ър╕Зр╣Ир╕▓р╕в р╣Ж (р╕кр╣Ир╕зр╕Щр╣Гр╕лр╕Нр╣Ир╣Ар╕Ыр╣Зр╕Щ jpeg р╕Ир╕▓р╕Б Telegram)
    return f"data:image/jpeg;base64,{b64}"


def _analyze_photo(caption: Optional[str], image_path: str) -> str:
    """р╣Ар╕гр╕╡р╕вр╕Б Vision model р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Ю"""
    user_text = (caption or "р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕гр╕╣р╕Ыр╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕вр╣Бр╕Ър╕Ър╕кр╕▒р╣Йр╕Щр╣Ж").strip()
    data_url = _file_to_data_url(image_path)

    resp = client.chat.completions.create(
        model=VISION_MODEL,
        messages=[
            {"role": "system", "content": "р╕Др╕╕р╕Ур╣Ар╕Ыр╣Зр╕Щр╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕ар╕▓р╕Юр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕╕р╕ар╕▓р╕Ю р╕Бр╕гр╕░р╕Кр╕▒р╕Ъ"},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": user_text},
                    {"type": "image_url", "image_url": {"url": data_url}},
                ],
            },
        ],
    )
    return (resp.choices[0].message.content or "").strip()


def _generate_image(prompt: str) -> bytes:
    """р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕Фр╣Йр╕зр╕в gpt-image-1 р╣Бр╕ер╣Йр╕зр╕Др╕╖р╕Щ bytes (PNG)"""
    p = prompt.strip() or "a cute shiba inu 3d sticker, thai text 'р╕Кр╕┤р╕Ър╕░р╕Щр╣Йр╕нр╕в'"
    resp = client.images.generate(model=IMAGE_MODEL, prompt=p, size=IMAGE_SIZE)
    b64 = resp.data[0].b64_json
    return base64.b64decode(b64)


def _send_photo_bytes(chat_id: int, img_bytes: bytes, caption: Optional[str] = None) -> None:
    """
    р╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╣Др╕Ы Telegram р╣Вр╕Фр╕вр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Ър╕Хр╣М (multipart/form-data)
    р╣Гр╕Кр╣Йр╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕гр╕▓р╣Др╕Фр╣Йр╕гр╕╣р╕Ыр╕бр╕▓р╕Ир╕▓р╕Бр╕Бр╕▓р╕г generate (р╣Др╕бр╣Ир╕бр╕╡ URL/file_id)
    """
    token = get_telegram_token()
    if not token:
        print("[image] WARNING: no Telegram token set")
        send_message(chat_id, "тЭМ р╕гр╕░р╕Ър╕Ър╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И (token р╕лр╕▓р╕в)")
        return

    url = f"https://api.telegram.org/bot{token}/sendPhoto"
    files = {
        "photo": ("image.png", img_bytes, "image/png"),
    }
    data = {
        "chat_id": str(chat_id),
    }
    if caption:
        # р╣Др╕бр╣Ир╣Гр╕кр╣И parse_mode р╣Ар╕Юр╕╖р╣Ир╕нр╕ер╕Фр╣Вр╕нр╕Бр╕▓р╕к 400 (can't parse entities)
        data["caption"] = caption[:1024]

    try:
        r = requests.post(url, data=data, files=files, timeout=60)
        if not r.ok:
            print("[image] sendPhoto multipart error:", r.status_code, r.text[:200])
            send_message(chat_id, "тЭМ р╕гр╕░р╕Ър╕Ър╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И (upload р╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф)")
    except Exception as e:
        print("[image] sendPhoto multipart exception:", e)
        send_message(chat_id, f"тЭМ р╕гр╕░р╕Ър╕Ър╕кр╣Ир╕Зр╕гр╕╣р╕Ыр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И: {e}")


# ---------- main entry ----------
def handle_image(chat_id: int, msg: dict) -> None:
    """
    р╣Ар╕Др╕кр╕Чр╕╡р╣Ир╕гр╕нр╕Зр╕гр╕▒р╕Ъ:
    - р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╣Ир╕Зр╕гр╕╣р╕Ы -> р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ы (р╣Гр╕Кр╣Й caption р╣Ар╕Ыр╣Зр╕Щр╕Др╕│р╕кр╕▒р╣Ир╕Зр╣Др╕Фр╣Й)
    - р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Юр╕┤р╕бр╕Юр╣М /imagine <prompt> -> р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╣Гр╕лр╕бр╣И
    - р╕Бр╕гр╕Ур╕╡р╕кр╕╖р╣Ир╕нр╕нр╕╖р╣Ир╕Щ р╣Ж (sticker/video/animation) р╕Ир╕░р╕Хр╕нр╕Ър╣Бр╕Щр╕░р╣Бр╕Щр╕зр╕Чр╕▓р╕З
    """
    try:
        text = (msg.get("caption") or msg.get("text") or "").strip()
        low = text.lower()

        # ===== р╣Вр╕лр╕бр╕Фр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Ю =====
        if low.startswith("/imagine"):
            prompt = text[8:].strip()  # р╕Хр╕▒р╕Фр╕Др╕│р╕кр╕▒р╣Ир╕З /imagine р╕нр╕нр╕Б
            if not prompt:
                send_message(chat_id, "р╕Юр╕┤р╕бр╕Юр╣М /imagine р╕Хр╕▓р╕бр╕Фр╣Йр╕зр╕вр╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г р╣Ар╕Кр╣Ир╕Щ\n/imagine р╕Кр╕┤р╕Ър╕░р╣Гр╕кр╣Ир╕лр╕бр╕зр╕Бр╣Ар╕Кр╕Я р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Вр╣Йр╕▓р╕зр╕Ьр╕▒р╕Ф")
                return

            # р╣Бр╕кр╕Фр╕Зр╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Зр╕▓р╕Щ
            try:
                send_chat_action(chat_id, "upload_photo")
            except Exception:
                pass

            try:
                img_bytes = _generate_image(prompt)
            except Exception as e:
                send_message(chat_id, f"тЭМ р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И: {e}")
                return

            _send_photo_bytes(chat_id, img_bytes, caption=f"ЁЯОи р╕кр╕гр╣Йр╕▓р╕Зр╕Ир╕▓р╕Бр╕Др╕│р╕кр╕▒р╣Ир╕З: {prompt}")
            return

        # ===== р╣Вр╕лр╕бр╕Фр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ы =====
        if msg.get("photo"):
            # р╣Бр╕Ир╣Йр╕Зр╕Бр╕│р╕ер╕▒р╕Зр╕Юр╕┤р╕бр╕Юр╣М/р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е
            try:
                send_chat_action(chat_id, "typing")
            except Exception:
                pass

            # р╣Ар╕ер╕╖р╕нр╕Бр╣Др╕Яр╕ер╣Мр╕гр╕╣р╕Ыр╕Чр╕╡р╣Ир╣Гр╕лр╕Нр╣Ир╕кр╕╕р╕Фр╕Ир╕▓р╕Б array
            sizes = msg["photo"]
            best = max(sizes, key=lambda x: x.get("file_size", 0))
            file_id = best.get("file_id")
            if not file_id:
                send_message(chat_id, "тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╕гр╕╣р╕Ыр╕ар╕▓р╕Юр╕Ир╕▓р╕Б Telegram")
                return

            local_path = download_telegram_file(file_id, "photo.jpg")
            if not local_path:
                send_message(chat_id, "тЭМ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И")
                return

            try:
                result = _analyze_photo(text, local_path)
                # р╕Ир╕│р╕Бр╕▒р╕Фр╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╕Др╕│р╕Хр╕нр╕Ъ (р╕Бр╕▒р╕Щр╕вр╕▓р╕зр╣Ар╕Бр╕┤р╕Щ)
                result = (result or "").strip()
                if len(result) > 3800:
                    result = result[:3800] + "тАж"
                send_message(chat_id, f"ЁЯЦ╝я╕П р╕Ьр╕ер╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Ю:\n{result}")
            except Exception as e:
                send_message(chat_id, f"тЭМ р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И: {e}")
            finally:
                try:
                    os.remove(local_path)
                except Exception:
                    pass
            return

        # ===== р╕кр╕╖р╣Ир╕нр╕нр╕╖р╣Ир╕Щ р╣Ж р╕Чр╕╡р╣И main_handler р╕кр╣Ир╕Зр╕бр╕▓р╕Хр╕гр╕Зр╕Щр╕╡р╣Й =====
        if msg.get("sticker"):
            send_message(chat_id, "р╕кр╕Хр╕┤р╣Кр╕Бр╣Ар╕Бр╕нр╕гр╣Мр╕Щр╣Ир╕▓р╕гр╕▒р╕Бр╕бр╕▓р╕Б! р╕Цр╣Йр╕▓р╕нр╕вр╕▓р╕Бр╣Гр╕лр╣Йр╕Ьр╕бр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Ю р╣Гр╕лр╣Йр╕кр╣Ир╕З тАШр╕гр╕╣р╕Ыр╕ар╕▓р╕ЮтАЩ р╕лр╕гр╕╖р╕нр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З /imagine р╣Ар╕Юр╕╖р╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╣Гр╕лр╕бр╣Ир╕Др╕гр╕▒р╕Ъ")
            return
        if msg.get("video") or msg.get("animation"):
            send_message(chat_id, "р╕Хр╕нр╕Щр╕Щр╕╡р╣Йр╕вр╕▒р╕Зр╕гр╕нр╕Зр╕гр╕▒р╕Ър╣Ар╕Йр╕Юр╕▓р╕░ тАШр╕гр╕╣р╕Ыр╕ар╕▓р╕ЮтАЩ р╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М/р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕Др╕гр╕▒р╕Ъ ЁЯЩП")
            return

        # р╣Др╕бр╣Ир╕бр╕╡р╕гр╕╣р╕Ыр╣Бр╕ер╕░р╣Др╕бр╣Ир╣Др╕Фр╣Й /imagine
        send_message(chat_id, "р╕кр╣Ир╕З тАШр╕гр╕╣р╕Ыр╕ар╕▓р╕ЮтАЩ р╕бр╕▓р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╕Ьр╕бр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М р╕лр╕гр╕╖р╕нр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З /imagine <prompt> р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╕Ьр╕бр╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕Др╕гр╕▒р╕Ъ")

    except Exception as e:
        send_message(chat_id, f"тЭМ р╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕гр╕╣р╕Ыр╕ар╕▓р╕Юр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И: {e}")
