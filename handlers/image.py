# handlers/image.py
# -*- coding: utf-8 -*-
"""
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 ‡πÇ‡∏´‡∏°‡∏î:
1) ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û (Vision): ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û + (‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÑ‡∏î‡πâ)
2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û (Image Gen): ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /imagine <prompt>
"""

import os
import base64
from typing import Optional

from utils.message_utils import send_message, send_photo
from utils.telegram_file_utils import download_telegram_file  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
from utils.openai_client import client  # ‡πÉ‡∏ä‡πâ client ‡∏Å‡∏•‡∏≤‡∏á (‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ proxies)
# ENV ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ú‡πà‡∏≤‡∏ô OPENAI_MODEL_VISION / OPENAI_MODEL_IMAGE ‡πÑ‡∏î‡πâ
VISION_MODEL = os.getenv("OPENAI_MODEL_VISION", "gpt-4o-mini")
IMAGE_MODEL  = os.getenv("OPENAI_MODEL_IMAGE", "gpt-image-1")


def _file_to_data_url(path: str) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô data URL (base64) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vision"""
    with open(path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")
    return f"data:image/jpeg;base64,{b64}"


def _analyze_photo(caption: Optional[str], image_path: str) -> str:
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Vision model ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û"""
    user_text = (caption or "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ").strip()
    data_url = _file_to_data_url(image_path)

    resp = client.chat.completions.create(
        model=VISION_MODEL,
        messages=[
            {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö"},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": user_text},
                    {"type": "image_url", "image_url": {"url": data_url}},
                ],
            },
        ],
    )
    return (resp.choices[0].message.content or "").strip()


def _generate_image(prompt: str) -> bytes:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ gpt-image-1 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô bytes (PNG/JPEG)"""
    p = prompt.strip() or "a cute shiba inu 3d sticker, thai text '‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢'"
    resp = client.images.generate(
        model=IMAGE_MODEL,
        prompt=p,
        size=os.getenv("OPENAI_IMAGE_SIZE", "1024x1024"),
    )
    # SDK v1 ‡∏à‡∏∞‡πÉ‡∏´‡πâ base64 ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ô data[0].b64_json
    b64 = resp.data[0].b64_json
    return base64.b64decode(b64)


def handle_image(chat_id: int, msg: dict) -> None:
    """
    ‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
    - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ -> ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ (‡πÉ‡∏ä‡πâ caption ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ)
    - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå /imagine <prompt> -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
    """
    try:
        text = (msg.get("caption") or msg.get("text") or "").strip()

        # ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå /imagine
        if text.lower().startswith("/imagine"):
            prompt = text.replace("/imagine", "", 1).strip()
            if not prompt:
                send_message(chat_id, "‡∏û‡∏¥‡∏°‡∏û‡πå /imagine ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô /imagine ‡∏ä‡∏¥‡∏ö‡∏∞‡πÉ‡∏™‡πà‡∏´‡∏°‡∏ß‡∏Å‡πÄ‡∏ä‡∏ü")
                return

            img_bytes = _generate_image(prompt)
            send_photo(chat_id, img_bytes, caption=f"üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {prompt}")
            return

        # ‡πÇ‡∏´‡∏°‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤)
        if msg.get("photo"):
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å array
            sizes = msg["photo"]
            best = max(sizes, key=lambda x: x.get("file_size", 0))
            file_id = best.get("file_id")
            if not file_id:
                send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Telegram")
                return

            local_path = download_telegram_file(file_id, "photo.jpg")
            if not local_path:
                send_message(chat_id, "‚ùå ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return

            try:
                result = _analyze_photo(text, local_path)
                send_message(chat_id, f"üñºÔ∏è ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û:\n{result}")
            finally:
                try:
                    os.remove(local_path)
                except Exception:
                    pass
            return

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ /imagine
        send_message(chat_id, "‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏î‡∏π ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /imagine <prompt> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏±‡∏ö")

    except Exception as e:
        send_message(chat_id, f"‚ùå ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
