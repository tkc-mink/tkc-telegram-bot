# handlers/image.py
# -*- coding: utf-8 -*-
"""
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 ‡πÇ‡∏´‡∏°‡∏î:
1) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó -> ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå/‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ (Vision)
2) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û ‡πÄ‡∏ä‡πà‡∏ô /imagine ‡∏†‡∏≤‡∏û‡∏´‡∏°‡∏≤‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡∏±‡πà‡∏á‡∏¢‡∏¥‡πâ‡∏° -> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢ gpt-image-1

‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á:
- utils.telegram_file_utils.download_telegram_file(file_id, file_name)  -> ‡∏Ñ‡∏∑‡∏ô path ‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
- utils.message_utils.send_message(chat_id, text)
- utils.message_utils.send_photo(chat_id, image_path, caption=None)     -> ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
"""

import os
import io
import base64
import mimetypes
from typing import Optional

from openai import OpenAI

from utils.message_utils import send_message
try:
    # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    from utils.message_utils import send_photo  # type: ignore
except Exception:
    send_photo = None  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏à‡∏∞ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏ô

from utils.telegram_file_utils import download_telegram_file

# ---------- OpenAI Client ----------
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
VISION_MODEL = os.getenv("OPENAI_VISION_MODEL", "gpt-4o-mini")  # vision OK
IMAGE_MODEL  = os.getenv("OPENAI_IMAGE_MODEL",  "gpt-image-1")   # image gen


# ---------- Helpers ----------
def _file_to_data_url(path: str) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô data URL (base64) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Vision
    """
    mime, _ = mimetypes.guess_type(path)
    if not mime:
        # ‡πÄ‡∏î‡∏≤‡πÄ‡∏õ‡πá‡∏ô jpg ‡∏ñ‡πâ‡∏≤‡πÄ‡∏î‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        mime = "image/jpeg"
    with open(path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")
    return f"data:{mime};base64,{b64}"


def _analyze_image_with_gpt(image_path: str, user_hint: Optional[str] = None) -> str:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢ Chat Completions (Vision)
    :param image_path: path ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    :param user_hint: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î
    """
    try:
        data_url = _file_to_data_url(image_path)
        user_text = user_hint.strip() if user_hint else "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"

        messages = [
            {
                "role": "system",
                "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô",
            },
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": user_text},
                    {"type": "image_url", "image_url": {"url": data_url}},
                ],
            },
        ]

        resp = client.chat.completions.create(
            model=VISION_MODEL,
            messages=messages,
            temperature=0.2,
        )
        return (resp.choices[0].message.content or "").strip() or "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ"
    except Exception as e:
        print(f"[image.analyze] {e}")
        return f"‚ùå ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}"


def _generate_image_to_file(prompt: str, out_path: str) -> bool:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢ Images API ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà out_path (png)
    """
    try:
        resp = client.images.generate(
            model=IMAGE_MODEL,
            prompt=prompt,
            size="1024x1024",
            n=1,
        )
        b64 = resp.data[0].b64_json
        if not b64:
            return False

        img_bytes = base64.b64decode(b64)
        with open(out_path, "wb") as f:
            f.write(img_bytes)
        return True
    except Exception as e:
        print(f"[image.generate] {e}")
        return False


# ---------- Main Handler ----------
def handle_image(chat_id: int, msg: dict) -> None:
    """
    ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Telegram
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ
    - ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô /imagine: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° prompt
    """
    try:
        # 1) ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á /imagine ‡πÑ‡∏´‡∏°
        text = (msg.get("text") or msg.get("caption") or "").strip()
        if text.startswith("/imagine"):
            prompt = text[len("/imagine"):].strip() or "a cute orange shiba inu mascot sitting, vector style, transparent background"
            tmp_out = f"/tmp/imagine_{chat_id}.png"
            ok = _generate_image_to_file(prompt, tmp_out)
            if not ok:
                send_message(chat_id, "‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                return

            if send_photo:
                send_photo(chat_id, tmp_out, caption=f"üñºÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {prompt}")
            else:
                send_message(chat_id, "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏ó‡∏ô)")
            if os.path.exists(tmp_out):
                os.remove(tmp_out)
            return

        # 2) ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        photo = msg.get("photo")
        if photo and isinstance(photo, list) and len(photo) > 0:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ã‡∏ã‡πå‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
            largest = photo[-1]
            file_id = largest.get("file_id")
            if not file_id:
                send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö file_id ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
                return

            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            local_path = download_telegram_file(file_id, f"photo_{chat_id}.jpg")
            if not local_path:
                send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Telegram ‡πÑ‡∏î‡πâ")
                return

            try:
                hint = text if text else None  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô hint
                result = _analyze_image_with_gpt(local_path, user_hint=hint)
                send_message(chat_id, f"üîé ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û:\n{result}")
            finally:
                if os.path.exists(local_path):
                    os.remove(local_path)
            return

        # 3) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏±‡πà‡∏á /imagine
        send_message(chat_id, "‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n`/imagine ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏±‡∏ö")

    except Exception as e:
        print(f"[handle_image] {e}")
        send_message(chat_id, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {e}")
