# handlers/image.py
# -*- coding: utf-8 -*-
"""
Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û)
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
1) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Telegram photo (msg['photo'])
2) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô document ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û (mime_type ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ image/)

‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£:
- ‡πÉ‡∏ä‡πâ utils.message_utils (retry/auto-chunk/no-echo)
- ‡πÅ‡∏™‡∏î‡∏á typing action ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
- parse_mode=HTML ‡∏û‡∏£‡πâ‡∏≠‡∏° escape ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î
- ‡∏Å‡∏±‡∏ô path traversal ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
"""

from __future__ import annotations
import os
import uuid
from typing import Dict, Any, List

from utils.message_utils import send_message, send_typing_action
from utils.telegram_file_utils import download_telegram_file

# Gemini Vision client (fallback ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ)
try:
    from utils.gemini_client import vision_analyze  # expected: (images: List[bytes], prompt: str) -> str
except Exception:
    def vision_analyze(image_data_list: List[bytes], prompt: str) -> str:  # type: ignore
        return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"

# ===== Config via ENV =====
_IMAGE_MAX_BYTES = int(os.getenv("IMAGE_MAX_BYTES", str(20 * 1024 * 1024)))  # ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 20MB

# ===== Helpers =====
def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _best_photo_file(msg_photo_list: List[Dict[str, Any]]) -> Dict[str, Any] | None:
    """
    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å msg['photo'] (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∑‡∏≠ size ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    """
    if not msg_photo_list:
        return None
    def _score(p):
        fs = p.get("file_size") or 0
        # ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ file_size: ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        wh = (p.get("width") or 0) * (p.get("height") or 0)
        return (fs, wh)
    return max(msg_photo_list, key=_score)

def _is_image_document(doc: Dict[str, Any]) -> bool:
    mime = (doc.get("mime_type") or "").lower()
    return mime.startswith("image/")

def _safe_name(base: str, suffix: str = ".jpg") -> str:
    """‡∏Å‡∏±‡∏ô path traversal + ‡πÉ‡∏™‡πà UUID ‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥"""
    base = os.path.basename(base or "image")
    # ‡∏ï‡∏±‡∏î‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏¥‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ suffix ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠ normalize ‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    name, _ext = os.path.splitext(base)
    return f"{name[:40]}_{uuid.uuid4().hex[:8]}{suffix}"

# ===== Main Entry Point =====
def handle_image(user_info: Dict[str, Any], msg: Dict[str, Any]) -> None:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gemini Vision
    - ‡πÉ‡∏ä‡πâ caption ‡πÄ‡∏õ‡πá‡∏ô prompt ‡πÑ‡∏î‡πâ; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡πÉ‡∏ä‡πâ prompt ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å msg['photo'] ‡πÅ‡∏•‡∏∞ document ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û (image/*)
    """
    chat_id = user_info["profile"]["user_id"]
    user_name = user_info["profile"].get("first_name") or ""

    try:
        # ==== ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 'photo' ‡∏Ç‡∏≠‡∏á Telegram ====
        if msg.get("photo"):
            best = _best_photo_file(msg["photo"])
            if not best or not best.get("file_id"):
                send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Telegram", parse_mode="HTML")
                return

            caption = (msg.get("caption") or "").strip()
            prompt = caption or "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"

            # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            send_typing_action(chat_id, "typing")

            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
            safe_filename = _safe_name("photo.jpg", ".jpg")
            local_path = download_telegram_file(best["file_id"], safe_filename)
            if not local_path or not os.path.exists(local_path):
                send_message(chat_id, "‚ùå ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Telegram ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
                return

            try:
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
                try:
                    if os.path.getsize(local_path) > _IMAGE_MAX_BYTES:
                        send_message(
                            chat_id,
                            f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö (‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ~{_IMAGE_MAX_BYTES // (1024*1024)}MB) "
                            f"‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ",
                            parse_mode="HTML",
                        )
                        return
                except Exception:
                    pass

                with open(local_path, "rb") as f:
                    img_bytes = f.read()

                send_typing_action(chat_id, "typing")
                result = vision_analyze([img_bytes], prompt=prompt) or "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"

                # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏û‡∏±‡∏á)
                send_message(
                    chat_id,
                    f"üñºÔ∏è <b>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û</b>\n\n{_html_escape(result)}",
                    parse_mode="HTML",
                )
            finally:
                try:
                    if os.path.exists(local_path):
                        os.remove(local_path)
                except Exception:
                    pass
            return

        # ==== ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô document (image/*) ====
        if msg.get("document") and _is_image_document(msg["document"]):
            doc = msg["document"]
            file_id = doc.get("file_id")
            if not file_id:
                send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Telegram", parse_mode="HTML")
                return

            caption = (msg.get("caption") or "").strip()
            prompt = caption or "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"

            send_typing_action(chat_id, "typing")
            orig_name = doc.get("file_name") or "image"
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏á‡∏™‡∏Å‡∏∏‡∏•‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡∏à‡∏≤‡∏Å mime type
            suffix = ".png" if (doc.get("mime_type") or "").lower().endswith("png") else ".jpg"
            safe_filename = _safe_name(orig_name, suffix)
            local_path = download_telegram_file(file_id, safe_filename)
            if not local_path or not os.path.exists(local_path):
                send_message(chat_id, "‚ùå ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Telegram ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
                return

            try:
                try:
                    if os.path.getsize(local_path) > _IMAGE_MAX_BYTES:
                        send_message(
                            chat_id,
                            f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö (‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ~{_IMAGE_MAX_BYTES // (1024*1024)}MB) "
                            f"‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ",
                            parse_mode="HTML",
                        )
                        return
                except Exception:
                    pass

                with open(local_path, "rb") as f:
                    img_bytes = f.read()

                send_typing_action(chat_id, "typing")
                result = vision_analyze([img_bytes], prompt=prompt) or "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"

                send_message(
                    chat_id,
                    f"üñºÔ∏è <b>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û</b>\n\n{_html_escape(result)}",
                    parse_mode="HTML",
                )
            finally:
                try:
                    if os.path.exists(local_path):
                        os.remove(local_path)
                except Exception:
                    pass
            return

        # ==== ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ====
        if msg.get("sticker"):
            send_message(chat_id, "‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏à‡∏±‡∏á! ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏∞‡πÑ‡∏£ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô ‚Äò‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‚Äô ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
            return
        if msg.get("video") or msg.get("animation"):
            send_message(chat_id, "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‚Äî ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ó‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôè", parse_mode="HTML")
            return

        # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏∑‡πà‡∏≠
        send_message(chat_id, "‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á ‚Äò‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‚Äô ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")

    except Exception as e:
        # ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á traceback ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        print(f"[handle_image] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
