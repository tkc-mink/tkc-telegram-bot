# handlers/faq.py
# -*- coding: utf-8 -*-
from __future__ import annotations
from typing import Dict, Any
from utils.memory_store import add_or_update_faq, get_faq_answer, get_all_faqs
from utils.telegram_api import send_message

def handle_faq(user_info: Dict[str, Any], user_text: str) -> None:
    chat_id, user_id = user_info['profile']['user_id'], user_info['profile']['user_id']
    parts = user_text.split(maxsplit=2)
    command = parts[0].lower()

    # /add_faq <keyword> <answer>
    if command == "/add_faq":
        if len(parts) < 3:
            send_message(chat_id, "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: /add_faq <‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°> <‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö>")
            return
        keyword, answer = parts[1], parts[2]
        if add_or_update_faq(keyword, answer, user_id):
            send_message(chat_id, f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å FAQ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '{keyword}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            send_message(chat_id, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å FAQ")
        return

    # /faq <keyword>
    if len(parts) > 1:
        keyword = parts[1]
        answer = get_faq_answer(keyword)
        if answer:
            send_message(chat_id, f"üí° **‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{keyword}':**\n\n{answer}")
        else:
            send_message(chat_id, f"‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{keyword}' ‡∏Ñ‡∏£‡∏±‡∏ö")
    # /faq (list all)
    else:
        faqs = get_all_faqs()
        if not faqs:
            send_message(chat_id, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ FAQ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö ‡πÉ‡∏ä‡πâ /add_faq ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
            return
        message = "**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ FAQ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**\n" + "\n".join(f"- `{item['keyword']}`" for item in faqs)
        send_message(chat_id, message, parse_mode="Markdown")
