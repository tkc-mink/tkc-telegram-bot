# handlers/search.py
# -*- coding: utf-8 -*-
"""
Handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Gemini:
- handle_gemini_search: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö (‡∏™‡πÑ‡∏ï‡∏•‡πå text)
- handle_gemini_image_generation: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£:
- ‡πÉ‡∏ä‡πâ utils.message_utils (retry/auto-chunk/no-echo + typing action)
- parse_mode=HTML ‡∏û‡∏£‡πâ‡∏≠‡∏° escape ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö signature ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (user_info, user_text) ‡πÅ‡∏•‡∏∞ legacy (chat_id, user_text)
- ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏™‡∏°‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û
- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° ENV: IMAGE_GEN_MAX_BYTES (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 10MB)
"""

from __future__ import annotations
import os
import uuid
from typing import Dict, Any, Tuple

from utils.message_utils import send_message, send_photo, send_typing_action

# ===== Gemini Client =====
try:
    from utils.gemini_client import generate_text, generate_image_file  # type: ignore
except Exception:
    def generate_text(prompt: str, prefer_strong: bool = False) -> str:  # type: ignore
        return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini Client ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå <code>utils/gemini_client.py</code>"
    def generate_image_file(prompt: str) -> str:  # type: ignore
        return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"

# ===== Config via ENV =====
_IMAGE_GEN_MAX_BYTES = int(os.getenv("IMAGE_GEN_MAX_BYTES", str(10 * 1024 * 1024)))  # 10MB

# ===== Helpers =====
def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _looks_html(s: str) -> bool:
    if not s:
        return False
    return ("</" in s) or ("<b>" in s) or ("<i>" in s) or ("<code>" in s) or ("<a " in s) or ("<br" in s)

def _strip_command_prefix(user_text: str, *prefixes: str) -> str:
    """‡∏ï‡∏±‡∏î prefix ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡∏Å ‡πÄ‡∏ä‡πà‡∏ô /search, /imagine, '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û'"""
    t = (user_text or "").strip()
    low = t.lower()
    for p in prefixes:
        if low.startswith(p.lower()):
            return t[len(p):].strip()
    return t

def _normalize_query_for_search(user_text: str) -> str:
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö /search, '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'
    q = _strip_command_prefix(user_text, "/search", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    return q

def _normalize_query_for_image(user_text: str) -> str:
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö /image, /imagine, '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û'
    q = _strip_command_prefix(user_text, "/image", "/imagine", "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û")
    return q

def _safe_temp_name(ext: str = ".png") -> str:
    return f"img_{uuid.uuid4().hex[:8]}{ext}"

def _send_text_result(chat_id: int | str, query: str, result: str) -> None:
    """‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå text ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ HTML/escape ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
    if not result:
        send_message(chat_id, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
        return
    if _looks_html(result):
        send_message(chat_id, result, parse_mode="HTML")
    else:
        send_message(
            chat_id,
            f"üîé <b>‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</b> ‚Äî <code>{_html_escape(query)}</code>\n\n{_html_escape(result)}",
            parse_mode="HTML",
        )

def _send_image_file(chat_id: int | str, file_path: str, caption: str) -> None:
    """
    ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ send_photo ‡∏Ç‡∏≠‡∏á message_utils (‡∏ã‡∏∂‡πà‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á URL/‡πÑ‡∏ü‡∏•‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏ú‡πà‡∏≤‡∏ô helper ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
    ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á
    """
    try:
        if not (file_path and os.path.exists(file_path)):
            send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
            return

        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        try:
            sz = os.path.getsize(file_path)
            if sz > _IMAGE_GEN_MAX_BYTES:
                send_message(
                    chat_id,
                    f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö (‡∏à‡∏≥‡∏Å‡∏±‡∏î ~{_IMAGE_GEN_MAX_BYTES // (1024*1024)}MB) "
                    f"‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á",
                    parse_mode="HTML",
                )
                return
        except Exception:
            pass

        # ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ
        send_photo(chat_id, file_path, caption=_html_escape(caption), parse_mode="HTML")
    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏°‡∏≠
        try:
            if file_path and os.path.exists(file_path):
                os.remove(file_path)
        except Exception:
            pass

# =====================================================================
# 1) Search & Summarize (Signature ‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏±‡∏ö user_info)
# =====================================================================
def handle_gemini_search(user_info: Dict[str, Any], user_text: str) -> None:
    chat_id = user_info["profile"]["user_id"]
    query = _normalize_query_for_search(user_text)

    if not query:
        send_message(
            chat_id,
            "‚ùóÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: <code>/search &lt;‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô&gt;</code>\n"
            "‡πÄ‡∏ä‡πà‡∏ô <code>/search ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå OTANI ‡∏£‡∏∏‡πà‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</code>",
            parse_mode="HTML",
        )
        return

    # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ + ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini
    send_typing_action(chat_id, "typing")
    send_message(chat_id, f"üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <code>{_html_escape(query)}</code> ‡∏î‡πâ‡∏ß‡∏¢ Gemini ‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶", parse_mode="HTML")

    try:
        prompt = (
            "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ "
            "‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢\n\n"
            f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠/‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô: {query}"
        )
        result = generate_text(prompt)
        _send_text_result(chat_id, query, result or "")
    except Exception as e:
        print(f"[handle_gemini_search] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", parse_mode="HTML")

# =====================================================================
# 2) Image Generation (Signature ‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏±‡∏ö user_info)
# =====================================================================
def handle_gemini_image_generation(user_info: Dict[str, Any], user_text: str) -> None:
    chat_id = user_info["profile"]["user_id"]
    prompt = _normalize_query_for_image(user_text)

    if not prompt:
        send_message(
            chat_id,
            "‚ùóÔ∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: <code>/image &lt;‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û&gt;</code>\n"
            "‡πÄ‡∏ä‡πà‡∏ô <code>/image ‡∏ô‡∏±‡∏Å‡∏ö‡∏¥‡∏ô‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡∏Ç‡∏µ‡πà‡∏°‡πâ‡∏≤‡∏¢‡∏π‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏ô‡∏ö‡∏ô‡∏î‡∏≤‡∏ß‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£ ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏•</code>",
            parse_mode="HTML",
        )
        return

    send_typing_action(chat_id, "upload_photo")
    send_message(chat_id, f"üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: <code>{_html_escape(prompt)}</code>", parse_mode="HTML")

    try:
        # ‡∏Ç‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Gemini
        path_or_err = generate_image_file(prompt)

        # ‡∏ñ‡πâ‡∏≤ Gemini ‡∏™‡πà‡∏á error message (‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‚ùå ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á)
        if not path_or_err or isinstance(path_or_err, str) and path_or_err.strip().startswith("‚ùå"):
            err = path_or_err or "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
            send_message(chat_id, _html_escape(str(err)), parse_mode="HTML")
            return

        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô path ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏´‡∏£‡∏∑‡∏≠ (‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï) ‡∏Ñ‡∏∑‡∏ô path ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏≠‡∏∑‡πà‡∏ô
        file_path = str(path_or_err).strip()
        if not os.path.exists(file_path):
            send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
            return

        # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á tmp ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô path ‡πÅ‡∏õ‡∏•‡∏Å)
        ext = os.path.splitext(file_path)[1].lower() or ".png"
        safe_tmp = _safe_temp_name(ext)
        try:
            # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            base_dir = os.path.dirname(file_path) or "."
            safe_path = os.path.join(base_dir, safe_tmp)
            os.replace(file_path, safe_path)
        except Exception:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ path ‡πÄ‡∏î‡∏¥‡∏°
            safe_path = file_path

        _send_image_file(chat_id, safe_path, caption=f"‚ú® ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£: {prompt}")

    except Exception as e:
        print(f"[handle_gemini_image_generation] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û", parse_mode="HTML")

# =====================================================================
# Legacy Signatures (‡∏£‡∏±‡∏ö chat_id, user_text) ‚Äî ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
# =====================================================================
def handle_gemini_search_legacy(chat_id: int | str, user_text: str) -> None:
    query = _normalize_query_for_search(user_text)
    if not query:
        send_message(chat_id, "‚ùóÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå <code>/search &lt;‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô&gt;</code>", parse_mode="HTML")
        return
    send_typing_action(chat_id, "typing")
    send_message(chat_id, f"üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <code>{_html_escape(query)}</code> ‡∏î‡πâ‡∏ß‡∏¢ Gemini ‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶", parse_mode="HTML")
    try:
        prompt = (
            "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢ ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏°‡∏µ\n\n"
            f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠/‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô: {query}"
        )
        result = generate_text(prompt)
        _send_text_result(chat_id, query, result or "")
    except Exception as e:
        print(f"[handle_gemini_search_legacy] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", parse_mode="HTML")

def handle_gemini_image_generation_legacy(chat_id: int | str, user_text: str) -> None:
    prompt = _normalize_query_for_image(user_text)
    if not prompt:
        send_message(chat_id, "‚ùóÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå <code>/image &lt;‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û&gt;</code>", parse_mode="HTML")
        return
    send_typing_action(chat_id, "upload_photo")
    send_message(chat_id, f"üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: <code>{_html_escape(prompt)}</code>", parse_mode="HTML")
    try:
        path_or_err = generate_image_file(prompt)
        if not path_or_err or (isinstance(path_or_err, str) and path_or_err.strip().startswith("‚ùå")):
            err = path_or_err or "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
            send_message(chat_id, _html_escape(str(err)), parse_mode="HTML")
            return

        file_path = str(path_or_err).strip()
        if not os.path.exists(file_path):
            send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
            return

        ext = os.path.splitext(file_path)[1].lower() or ".png"
        safe_tmp = _safe_temp_name(ext)
        try:
            base_dir = os.path.dirname(file_path) or "."
            safe_path = os.path.join(base_dir, safe_tmp)
            os.replace(file_path, safe_path)
        except Exception:
            safe_path = file_path

        _send_image_file(chat_id, safe_path, caption=f"‚ú® ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£: {prompt}")
    except Exception as e:
        print(f"[handle_gemini_image_generation_legacy] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û", parse_mode="HTML")
