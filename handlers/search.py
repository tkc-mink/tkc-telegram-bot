# handlers/search.py
# -*- coding: utf-8 -*-
"""
Handlers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Gemini:
- handle_gemini_search: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö
- handle_gemini_image_generation: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
"""
import os
from utils.message_utils import send_message, send_photo

# ===== Import Gemini Client (‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å) =====
# ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô gemini_client.py
try:
    from utils.gemini_client import generate_text, generate_image_file
except ImportError:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á (Fallback) ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    def generate_text(prompt: str, prefer_strong: bool = False) -> str:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini Client ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå utils/gemini_client.py"
    def generate_image_file(prompt: str) -> str:
        return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Gemini Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ"

# ===== 1. Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Search & Summarize) =====
def handle_gemini_search(chat_id: int, user_text: str):
    """
    Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Gemini
    """
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á /search ‡πÅ‡∏•‡∏∞ "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    query = user_text
    if user_text.lower().startswith("/search"):
        query = user_text[len("/search"):].strip()
    elif user_text.startswith("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"):
        query = user_text[len("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"):].strip()

    if not query:
        send_message(chat_id, "‚ùóÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå /search ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤\n‡πÄ‡∏ä‡πà‡∏ô: /search ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡∏≤‡∏á‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå OTANI ‡∏£‡∏∏‡πà‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        return

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini
    prompt_for_gemini = f"‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö '{query}' ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢"
    
    send_message(chat_id, f"üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '{query}' ‡∏î‡πâ‡∏ß‡∏¢ Gemini...")

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini!
    result = generate_text(prompt_for_gemini)

    # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà Gemini ‡∏™‡∏£‡∏∏‡∏õ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    send_message(chat_id, result, parse_mode="Markdown")


# ===== 2. Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏†‡∏≤‡∏û (Image Generation) =====
def handle_gemini_image_generation(chat_id: int, user_text: str):
    """
    Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gemini
    """
    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö /image, /imagine, "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û")
    query = user_text
    if user_text.lower().startswith("/image"):
        query = user_text[len("/image"):].strip()
    elif user_text.lower().startswith("/imagine"):
        query = user_text[len("/imagine"):].strip()
    elif user_text.startswith("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û"):
        query = user_text[len("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û"):].strip()
    
    if not query:
        send_message(chat_id, "‚ùóÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå /image ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏û\n‡πÄ‡∏ä‡πà‡∏ô: /image ‡∏ô‡∏±‡∏Å‡∏ö‡∏¥‡∏ô‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡∏Ç‡∏µ‡πà‡∏°‡πâ‡∏≤‡∏¢‡∏π‡∏ô‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏ô‡∏ö‡∏ô‡∏î‡∏≤‡∏ß‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£")
        return

    send_message(chat_id, f"üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏†‡∏≤‡∏û '{query}' ‡∏î‡πâ‡∏ß‡∏¢ Gemini...")

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
    # ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    file_path = generate_image_file(query)

    if file_path and file_path.endswith(".png"):
        # ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        send_photo(chat_id, file_path, caption=f"‚ú® ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£: {query}")
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏¥‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        try:
            os.remove(file_path)
        except OSError as e:
            print(f"Error removing file {file_path}: {e}")
    else:
        # ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å client ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        error_message = file_path or "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
        send_message(chat_id, error_message)
