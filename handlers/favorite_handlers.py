# handlers/favorite_handlers.py
# -*- coding: utf-8 -*-
"""
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î' ‡∏î‡πâ‡∏ß‡∏¢ python-telegram-bot (async)
‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
- /favorite_add <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>             ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
- /favorite_list                       ‡πÅ‡∏™‡∏î‡∏á N ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏Ñ‡πà‡∏≤‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 10)
- /favorite_remove <‡∏•‡∏≥‡∏î‡∏±‡∏ö|‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>    ‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1) ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö

‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ:
- ‡πÉ‡∏ä‡πâ parse_mode=HTML ‡∏û‡∏£‡πâ‡∏≠‡∏° escape ‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î (‡∏Å‡∏±‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏û‡∏±‡∏á/‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ù‡∏±‡∏á)
- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå (typing action)
- ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚â§ 4096 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà ‚Äú‡πÄ‡∏Å‡πá‡∏ö‚Äù ‡∏ú‡πà‡∏≤‡∏ô ENV: FAVORITE_MAX_CHARS (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 2000)
- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡πà‡∏≤‡∏ô ENV: FAVORITE_LIST_LIMIT (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 10)
"""

from __future__ import annotations
import os
import re
import html
from typing import List, Dict

from telegram import Update
from telegram.constants import ChatAction, ParseMode
from telegram.ext import ContextTypes

from utils.favorite_utils import add_favorite, get_favorites, remove_favorite

# ===== Config via ENV =====
TELEGRAM_MESSAGE_LIMIT = 4096
FAVORITE_MAX_CHARS = int(os.getenv("FAVORITE_MAX_CHARS", "2000"))
FAVORITE_LIST_LIMIT = int(os.getenv("FAVORITE_LIST_LIMIT", "10"))

# ===== Small helpers =====
def _uid(update: Update) -> str:
    """‡∏Ñ‡∏∑‡∏ô user_id ‡πÄ‡∏õ‡πá‡∏ô string (‡πÄ‡∏ú‡∏∑‡πà‡∏≠ storage ‡πÉ‡∏ä‡πâ str ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå)"""
    return str(update.effective_user.id) if update and update.effective_user else "unknown"

def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _normalize_text(s: str) -> str:
    """‡∏•‡∏î zero-width, normalize ‡πÅ‡∏ñ‡∏ß/‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ï‡∏≤‡∏° FAVORITE_MAX_CHARS"""
    if not s:
        return ""
    s = s.replace("\x00", "")
    s = re.sub(r"[\u200B-\u200D\uFEFF]", "", s)  # zero-width chars
    s = s.replace("\r\n", "\n").replace("\r", "\n")
    # ‡∏ö‡∏µ‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    lines = [re.sub(r"[ \t]{2,}", " ", ln).strip() for ln in s.split("\n")]
    # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1
    cleaned: List[str] = []
    for ln in lines:
        if ln == "" and cleaned and cleaned[-1] == "":
            continue
        cleaned.append(ln)
    out = "\n".join(cleaned).strip()
    return out[:FAVORITE_MAX_CHARS]

def _format_list(items: List[Dict], max_items: int) -> str:
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠ HTML"""
    if not items:
        return "üì≠ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
    lines: List[str] = [f"üìå <b>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {max_items} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</b>"]
    for i, item in enumerate(items[:max_items], start=1):
        q = _html_escape(item.get("text") or item.get("q") or "")
        dt = _html_escape(item.get("date") or "")
        q = q if q else "-"
        if dt:
            lines.append(f"{i}. <b>{q}</b>\n   üóìÔ∏è {dt}")
        else:
            lines.append(f"{i}. <b>{q}</b>")
    lines.append("\n‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: <code>/favorite_remove &lt;‡∏•‡∏≥‡∏î‡∏±‡∏ö&gt;</code> ‡∏´‡∏£‡∏∑‡∏≠ <code>/favorite_remove &lt;‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°&gt;</code>")
    return "\n".join(lines)

def _usage() -> str:
    return (
        "<b>‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î</b>\n"
        "‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°: <code>/favorite_add &lt;‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°&gt;</code>\n"
        f"‚Ä¢ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: <code>/favorite_list</code>  (‡πÅ‡∏™‡∏î‡∏á {FAVORITE_LIST_LIMIT} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n"
        "‚Ä¢ ‡∏•‡∏ö: <code>/favorite_remove &lt;‡∏•‡∏≥‡∏î‡∏±‡∏ö&gt;</code> ‡∏´‡∏£‡∏∑‡∏≠ <code>/favorite_remove &lt;‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°&gt;</code>"
    )

def _normalize_args(context: ContextTypes.DEFAULT_TYPE) -> List[str]:
    """‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á arg ‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å (join ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)"""
    args = (context.args or [])
    return [a for a in (" ".join(args).strip(),) if a]

async def _send_typing(context: ContextTypes.DEFAULT_TYPE, chat_id: int | str) -> None:
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except Exception:
        pass

async def _reply_html(update: Update, text: str, context: ContextTypes.DEFAULT_TYPE, disable_preview: bool = True) -> None:
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö HTML ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô ‚â§ 4096 ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    if not text:
        return
    chunks: List[str] = []
    buf = ""
    for line in text.splitlines(True):  # ‡πÄ‡∏Å‡πá‡∏ö \n
        if len(buf) + len(line) <= TELEGRAM_MESSAGE_LIMIT:
            buf += line
        else:
            if buf:
                chunks.append(buf)
                buf = ""
            # ‡∏ñ‡πâ‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô limit ‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏ó‡πà‡∏≠‡∏ô
            while len(line) > TELEGRAM_MESSAGE_LIMIT:
                chunks.append(line[:TELEGRAM_MESSAGE_LIMIT])
                line = line[TELEGRAM_MESSAGE_LIMIT:]
            buf = line
    if buf:
        chunks.append(buf)

    # ‡∏ï‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏ä‡∏¥‡πâ‡∏ô‡πÑ‡∏´‡∏ô‡∏¢‡∏±‡∏á‡∏¢‡∏≤‡∏ß (‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ \n)
    fixed: List[str] = []
    for c in chunks:
        if len(c) <= TELEGRAM_MESSAGE_LIMIT:
            fixed.append(c)
            continue
        wbuf = ""
        for w in c.split(" "):
            add = (w + " ")
            if len(wbuf) + len(add) > TELEGRAM_MESSAGE_LIMIT:
                fixed.append(wbuf.rstrip())
                wbuf = ""
            wbuf += add
        if wbuf:
            fixed.append(wbuf.rstrip())

    for piece in (fixed or [""]):
        await update.message.reply_text(
            piece,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=disable_preview
        )

# ===== Handlers =====
async def favorite_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = _uid(update)

    args = _normalize_args(context)
    if not args:
        await _reply_html(update, "‚ùóÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÄ‡∏ä‡πà‡∏ô:\n<code>/favorite_add ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏•‡πâ‡∏≠</code>", context)
        return

    text_raw = args[0]
    text_norm = _normalize_text(text_raw)
    if not text_norm.strip():
        await _reply_html(update, "‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", context)
        return

    await _send_typing(context, chat_id)
    try:
        ok = add_favorite(user_id, text_norm)
        if ok:
            preview = _html_escape(text_norm[:160] + ("‚Ä¶" if len(text_norm) > 160 else ""))
            await _reply_html(update, f"‚≠êÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: <i>{preview}</i>", context)
        else:
            await _reply_html(update, "üìå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß", context)
    except Exception as e:
        emsg = _html_escape(str(e))
        await _reply_html(update, f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: <code>{emsg}</code>", context)

async def favorite_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await _send_typing(context, chat_id)
    try:
        favs = get_favorites(_uid(update), limit=FAVORITE_LIST_LIMIT) or []
        body = _format_list(favs, max_items=FAVORITE_LIST_LIMIT)
        await _reply_html(update, body, context)
    except Exception as e:
        emsg = _html_escape(str(e))
        await _reply_html(update, f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: <code>{emsg}</code>", context)

async def favorite_remove(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    args = _normalize_args(context)
    if not args:
        await _reply_html(
            update,
            "‚ùóÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô\n"
            "<code>/favorite_remove 2</code>   (‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 2)\n"
            "<code>/favorite_remove ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏•‡πâ‡∏≠</code>",
            context,
        )
        return

    target = args[0].strip()
    await _send_typing(context, chat_id)

    try:
        # ‡∏•‡∏ö‡πÑ‡∏î‡πâ 2 ‡πÅ‡∏ö‡∏ö: ‡∏ï‡∏≤‡∏° '‡∏•‡∏≥‡∏î‡∏±‡∏ö' (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1) ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
        if target.isdigit():
            idx = int(target)
            if idx < 1:
                await _reply_html(update, "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö", context)
                return

            # ‡πÄ‡∏™‡∏£‡∏¥‡∏°: ‡πÅ‡∏à‡πâ‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            try:
                current = get_favorites(_uid(update), limit=FAVORITE_LIST_LIMIT) or []
                n = len(current)
                if n and idx > n:
                    await _reply_html(update, f"‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {n} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î) ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ 1..{n}", context)
                    return
            except Exception:
                pass

            ok = remove_favorite(_uid(update), index=idx)  # ‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö parameter index
        else:
            ok = remove_favorite(_uid(update), text=target)  # ‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö parameter text

        if ok:
            await _reply_html(update, "üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö", context)
        else:
            await _reply_html(update, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏£‡∏±‡∏ö", context)
    except Exception as e:
        emsg = _html_escape(str(e))
        await _reply_html(update, f"‚ùå ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: <code>{emsg}</code>", context)

# (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ú‡∏π‡∏Å /favorite_help
async def favorite_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await _reply_html(update, _usage(), context)
