# handlers/favorite_handlers.py
# -*- coding: utf-8 -*-
"""
‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î' ‡∏î‡πâ‡∏ß‡∏¢ python-telegram-bot (async)
‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:
- /favorite_add <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
- /favorite_list                  ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
- /favorite_remove <‡∏•‡∏≥‡∏î‡∏±‡∏ö|‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°> ‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
"""

from __future__ import annotations
import html
from typing import List, Dict

from telegram import Update
from telegram.ext import ContextTypes

from utils.favorite_utils import add_favorite, get_favorites, remove_favorite


def _uid(update: Update) -> str:
    """‡∏Ñ‡∏∑‡∏ô user_id ‡πÄ‡∏õ‡πá‡∏ô string (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏ù‡∏±‡πà‡∏á storage ‡πÉ‡∏ä‡πâ str ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå)"""
    return str(update.effective_user.id) if update and update.effective_user else "unknown"


def _normalize_args(context: ContextTypes.DEFAULT_TYPE) -> List[str]:
    """‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á arg ‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å"""
    args = (context.args or [])
    return [a for a in (" ".join(args).strip(),) if a]


def _format_list(items: List[Dict], max_items: int = 10) -> str:
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠ HTML"""
    lines: List[str] = []
    for i, item in enumerate(items[:max_items], start=1):
        q = html.escape(item.get("text") or item.get("q") or "")
        dt = html.escape(item.get("date") or "")
        lines.append(f"{i}. <b>{q}</b>\n   üóìÔ∏è {dt}")
    return "\n".join(lines)


async def favorite_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = _uid(update)

    args = _normalize_args(context)
    if not args:
        await update.message.reply_text(
            "‚ùóÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÄ‡∏ä‡πà‡∏ô:\n"
            "/favorite_add ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏•‡πâ‡∏≠"
        )
        return

    text = args[0]
    if not text.strip():
        await update.message.reply_text("‚ùóÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        return

    try:
        ok = add_favorite(user_id, text)
        if ok:
            await update.message.reply_text("‚≠êÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            await update.message.reply_text("üìå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")


async def favorite_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = _uid(update)
    try:
        favs = get_favorites(user_id, limit=10) or []
        if not favs:
            await update.message.reply_text("üì≠ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö")
            return

        body = _format_list(favs, max_items=10)
        await update.message.reply_text(
            f"üìå <b>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</b>\n{body}",
            parse_mode="HTML"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")


async def favorite_remove(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = _uid(update)

    args = _normalize_args(context)
    if not args:
        await update.message.reply_text(
            "‚ùóÔ∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô\n"
            "/favorite_remove 2   (‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 2)\n"
            "/favorite_remove ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏•‡πâ‡∏≠"
        )
        return

    target = args[0]

    try:
        # ‡∏•‡∏ö‡πÑ‡∏î‡πâ 2 ‡πÅ‡∏ö‡∏ö: ‡∏ï‡∏≤‡∏° '‡∏•‡∏≥‡∏î‡∏±‡∏ö' (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
        if target.isdigit():
            idx = int(target)
            ok = remove_favorite(user_id, index=idx)  # ‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö parameter index
        else:
            ok = remove_favorite(user_id, text=target)  # ‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏Ñ‡∏ß‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö parameter text

        if ok:
            await update.message.reply_text("üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
        else:
            await update.message.reply_text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏£‡∏±‡∏ö")
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
