# handlers/doc.py
# -*- coding: utf-8 -*-
import os
from typing import List

from utils.message_utils import send_message
from utils.history_utils import log_message
from utils.doc_extract_utils import (
    extract_text_pdf,
    extract_text_docx,
    extract_text_xlsx,
    extract_text_pptx,
)
from utils.telegram_file_utils import download_telegram_file
from utils.telegram_api import send_chat_action  # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Telegram
from function_calling import summarize_text_with_gpt  # ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∏‡∏ì

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ chunk ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡πâ‡∏≠‡∏ô (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ~2-3k tokens/‡∏Å‡πâ‡∏≠‡∏ô)
_CHUNK_CHARS = int(os.getenv("DOC_SUMMARY_CHUNK_CHARS", "6000"))
_MAX_CHUNKS  = int(os.getenv("DOC_SUMMARY_MAX_CHUNKS", "8"))  # ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏´‡∏ï‡∏∏


def _split_text(text: str, size: int) -> List[str]:
    """‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πâ‡∏≠‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏ï‡∏±‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡∏≠‡∏¢‡∏Ñ‡∏≥‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)"""
    text = text.strip()
    return [text[i:i+size] for i in range(0, len(text), size)]


def _hierarchical_summarize(full_text: str) -> str:
    """
    ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≠‡∏ô ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏ß‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô
    ‡∏ñ‡πâ‡∏≤‡∏™‡∏±‡πâ‡∏ô: ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    """
    if len(full_text) <= _CHUNK_CHARS:
        return summarize_text_with_gpt(full_text)

    chunks = _split_text(full_text, _CHUNK_CHARS)[:_MAX_CHUNKS]
    partials: List[str] = []
    for idx, ck in enumerate(chunks, 1):
        partials.append(summarize_text_with_gpt(f"[‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {idx}/{len(chunks)}]\n{ck}"))

    merged = "\n\n".join(f"- {p}" for p in partials)
    final = summarize_text_with_gpt("‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:\n" + merged)
    return final


def handle_doc(chat_id, msg):
    """
    ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Telegram ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡∏∏‡∏õ (PDF, DOCX, XLSX, PPTX, TXT)
    """
    doc = msg.get("document") or {}
    if not doc:
        send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤")
        return

    file_name = doc.get("file_name", "document")
    file_id = doc.get("file_id")
    user_id = str(chat_id)

    # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    try:
        send_chat_action(chat_id, "upload_document")  # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Telegram
    except Exception:
        pass
    send_message(chat_id, f"üì• ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå **{file_name}** ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‚Ä¶")

    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Telegram
    local_path = download_telegram_file(file_id, file_name)
    if not local_path:
        send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")
        return

    ext = os.path.splitext(file_name)[1].lower()
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î
        if ext == ".pdf":
            text = extract_text_pdf(local_path)
        elif ext == ".docx":
            text = extract_text_docx(local_path)
        elif ext == ".xlsx":
            text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel:\n" + extract_text_xlsx(local_path)
        elif ext == ".pptx":
            text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô PowerPoint:\n" + extract_text_pptx(local_path)
        elif ext == ".txt":
            with open(local_path, encoding="utf-8", errors="ignore") as f:
                text = f.read()
        else:
            send_message(chat_id, "‚ùå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PDF, Word (docx), Excel (xlsx), PowerPoint (pptx), ‡πÅ‡∏•‡∏∞ TXT")
            return

        text = (text or "").strip()
        if not text:
            send_message(chat_id, "‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö")
            return

        # ‡∏™‡∏£‡∏∏‡∏õ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≠‡∏ô)
        summary = _hierarchical_summarize(text)

        send_message(chat_id, f"üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå **{file_name}**\n\n{summary}")
        log_message(user_id, f"‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå {file_name}", summary)

    except Exception as e:
        send_message(chat_id, f"‚ùå ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    finally:
        try:
            if os.path.exists(local_path):
                os.remove(local_path)
        except Exception:
            pass
