# handlers/doc.py
# -*- coding: utf-8 -*-
"""
Handler for processing and summarizing uploaded documents.
Upgraded to integrate with the new user profile and memory system.
"""
from __future__ import annotations
import os
from typing import List, Tuple, Dict, Any

# --- ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö imports ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ---
from utils.telegram_api import send_message, send_chat_action
from utils.memory_store import append_message # <-- ‡πÉ‡∏ä‡πâ memory_store ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
from utils.doc_extract_utils import (
    extract_text_pdf, extract_text_docx,
    extract_text_xlsx, extract_text_pptx
)
from utils.telegram_file_utils import download_telegram_file
from function_calling import summarize_text_with_gpt

# --- Configuration (‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
_CHUNK_CHARS = int(os.getenv("DOC_SUMMARY_CHUNK_CHARS", "6000"))
_MAX_CHUNKS = int(os.getenv("DOC_SUMMARY_MAX_CHUNKS", "8"))
_MAX_FILE_MB = int(os.getenv("DOC_MAX_FILE_MB", "25"))
_SUPPORTED_EXT = {".pdf", ".docx", ".xlsx", ".pptx", ".txt"}

# --- Helper Functions (‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
def _human_mb(n_bytes: int) -> float:
    try:
        return round(n_bytes / (1024 * 1024), 2)
    except Exception:
        return 0.0

def _split_text_smart(text: str, size: int) -> List[str]:
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
    text = (text or "").strip()
    if not text: return []
    paras = text.split("\n\n")
    chunks: List[str] = []
    buf: List[str] = []
    cur_len = 0
    for p in paras:
        p = p.strip()
        if not p: continue
        if len(p) > size:
            if buf:
                chunks.append("\n\n".join(buf).strip())
                buf, cur_len = [], 0
            for i in range(0, len(p), size):
                chunks.append(p[i:i+size])
            continue
        if cur_len + len(p) + (2 if buf else 0) > size:
            if buf:
                chunks.append("\n\n".join(buf).strip())
            buf, cur_len = [p], len(p)
        else:
            buf.append(p)
            cur_len += len(p) + (2 if len(buf) > 1 else 0)
    if buf:
        chunks.append("\n\n".join(buf).strip())
    return chunks

def _hierarchical_summarize(full_text: str) -> str:
    # (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
    text = (full_text or "").strip()
    if not text: return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
    if len(text) <= _CHUNK_CHARS:
        return summarize_text_with_gpt(text)
    chunks = _split_text_smart(text, _CHUNK_CHARS)[:_MAX_CHUNKS]
    if not chunks: return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ"
    partials = [
        summarize_text_with_gpt(f"[‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {idx}/{len(chunks)}]\n{ck}")
        for idx, ck in enumerate(chunks, 1)
    ]
    merged = "\n\n".join(f"- {p}" for p in partials if p)
    final = summarize_text_with_gpt(
        "‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n\n" + merged
    )
    return final

def _validate_document_meta(doc: dict) -> Tuple[bool, str]:
    # (‡πÇ‡∏Ñ‡πâd‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£)
    file_name = doc.get("file_name", "document")
    ext = os.path.splitext(file_name)[1].lower()
    if ext not in _SUPPORTED_EXT:
        return False, "‚ùå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF, Word, Excel, PowerPoint ‡πÅ‡∏•‡∏∞ TXT ‡∏Ñ‡∏£‡∏±‡∏ö"
    size = doc.get("file_size")
    if isinstance(size, int) and size > _MAX_FILE_MB * 1024 * 1024:
        mb = _human_mb(size)
        return False, f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({mb} MB) ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {_MAX_FILE_MB} MB ‡∏Ñ‡∏£‡∏±‡∏ö"
    return True, ""


# --- ‚úÖ Entry Point ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß ---
def handle_doc(user_info: Dict[str, Any], msg: Dict[str, Any]) -> None:
    """
    ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£, ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î, ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏™‡∏£‡∏∏‡∏õ, ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ñ‡∏≤‡∏ß‡∏£
    """
    # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å user_info
    chat_id = user_info['profile']['user_id']
    user_name = user_info['profile']['first_name']
    
    doc = msg.get("document") or {}
    if not doc:
        send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö")
        return

    ok, why = _validate_document_meta(doc)
    if not ok:
        send_message(chat_id, why)
        return

    file_name = doc.get("file_name", "document")
    file_id = doc.get("file_id")

    # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ñ‡∏≤‡∏ß‡∏£
    append_message(chat_id, "user", f"[‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_name}]")
    
    # 3. ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    send_chat_action(chat_id, "typing")
    send_message(chat_id, f"üì• ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå **{file_name}** ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì {user_name} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö\n\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶")

    local_path = None
    try:
        local_path = download_telegram_file(file_id, file_name)
        if not local_path or not os.path.exists(local_path):
            send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Telegram ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")
            return

        # (‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        ext = os.path.splitext(file_name)[1].lower()
        text = ""
        if ext == ".pdf": text = extract_text_pdf(local_path)
        elif ext == ".docx": text = extract_text_docx(local_path)
        elif ext == ".xlsx": text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel:\n" + extract_text_xlsx(local_path)
        elif ext == ".pptx": text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô PowerPoint:\n" + extract_text_pptx(local_path)
        elif ext == ".txt":
            with open(local_path, encoding="utf-8", errors="ignore") as f:
                text = f.read()
        
        text = (text or "").strip()
        if not text:
            send_message(chat_id, f"‚ö†Ô∏è **{file_name}** ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö")
            return

        # ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        send_chat_action(chat_id, "typing")
        summary = _hierarchical_summarize(text)
        
        # 4. ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        final_message = f"üìÑ **‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå {file_name} ‡∏Ñ‡∏£‡∏±‡∏ö:**\n\n{summary}"
        send_message(chat_id, final_message, parse_mode="Markdown")
        append_message(chat_id, "assistant", final_message)

    except Exception as e:
        error_message = f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {user_name} ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå: {e}"
        send_message(chat_id, error_message)
        append_message(chat_id, "assistant", error_message) # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error ‡∏•‡∏á history ‡∏î‡πâ‡∏ß‡∏¢
    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏™‡∏°‡∏≠
        if local_path and os.path.exists(local_path):
            try:
                os.remove(local_path)
            except Exception as e:
                print(f"[handle_doc] Failed to remove temp file {local_path}: {e}")
