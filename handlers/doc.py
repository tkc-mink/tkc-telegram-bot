# handlers/main_handler.py
import traceback
from typing import Dict, Any

# ---- Feature handlers ----
from handlers.history import handle_history
from handlers.review import handle_review
from handlers.weather import handle_weather
from handlers.doc import handle_doc
from handlers.image import handle_image
from handlers.gold import handle_gold
from handlers.lottery import handle_lottery
from handlers.stock import handle_stock
from handlers.crypto import handle_crypto
from handlers.oil import handle_oil
# ‡πÄ‡∏û‡∏¥‡πà‡∏° news ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
# from handlers.news import handle_news

# ---- Utils ----
from utils.message_utils import send_message
from utils.context_utils import ask_for_location_if_needed  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å
from utils.json_utils import safe_get  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å

def handle_message(data: Dict[str, Any]) -> None:
    """
    Entry point ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å Flask webhook
    data: raw dict ‡∏à‡∏≤‡∏Å Telegram webhook
    """
    try:
        msg: Dict[str, Any] = data.get("message", {}) or {}
        chat = msg.get("chat") or {}
        chat_id = chat.get("id")
        if chat_id is None:
            return  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà message ‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô callback / edited / etc.

        # ‡∏ï‡∏£‡∏ß‡∏à document/location/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        user_text = (msg.get("caption") or msg.get("text") or "").strip()
        user_text_low = user_text.lower()

        # ==== PRIORITY: document / location ====
        # Document upload
        if msg.get("document"):
            handle_doc(chat_id, msg)
            return

        # Location share
        if msg.get("location"):
            # ‡πÄ‡∏Å‡πá‡∏ö location ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö (‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô update_location ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô utils.context_utils?)
            from utils.context_utils import update_location
            loc = msg["location"]
            lat, lon = loc.get("latitude"), loc.get("longitude")
            if lat is not None and lon is not None:
                update_location(str(chat_id), lat, lon)
                send_message(chat_id, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
            else:
                send_message(chat_id, "‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà")
            return

        # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡∏¢
        if user_text == "":
            send_message(chat_id, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ /help")
            return

        # ==== COMMAND DISPATCH ====
        if user_text_low.startswith("/my_history"):
            handle_history(chat_id, user_text)
        elif user_text_low.startswith("/gold"):
            handle_gold(chat_id, user_text)
        elif user_text_low.startswith("/lottery"):
            handle_lottery(chat_id, user_text)
        elif user_text_low.startswith("/stock"):
            handle_stock(chat_id, user_text)
        elif user_text_low.startswith("/crypto"):
            handle_crypto(chat_id, user_text)
        elif user_text_low.startswith("/oil"):
            handle_oil(chat_id, user_text)
        elif user_text_low.startswith("/weather") or "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®" in user_text_low:
            handle_weather(chat_id, user_text)
        elif "‡∏Ç‡∏≠‡∏£‡∏π‡∏õ" in user_text_low or user_text_low.startswith("/image"):
            handle_image(chat_id, user_text)
        elif user_text_low.startswith("/review"):
            handle_review(chat_id, user_text)
        # elif user_text_low.startswith("/news"):
        #     handle_news(chat_id, user_text)
        elif user_text_low.startswith("/start") or user_text_low.startswith("/help"):
            send_message(
                chat_id,
                "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà TKC Bot ü¶ä\n\n"
                "- /my_history   ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n"
                "- /gold         ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n"
                "- /lottery      ‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å\n"
                "- /stock <sym>  ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô /stock AAPL\n"
                "- /crypto <sym> ‡∏£‡∏≤‡∏Ñ‡∏≤ Crypto ‡πÄ‡∏ä‡πà‡∏ô /crypto BTC\n"
                "- /oil          ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÇ‡∏•‡∏Å\n"
                "- /weather      ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏£‡πå location ‡∏Å‡πà‡∏≠‡∏ô)\n"
                "- /review       ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏≠‡∏ó (1-5)\n"
                "- ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF/Word/Excel/PPT/TXT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ\n"
                "- ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏Ç‡∏≠‡∏£‡∏π‡∏õ ...' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û\n"
            )
        else:
            # Fallback
            send_message(chat_id, "‚ùì ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå /help")

    except Exception as e:
        # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå stack trace
        try:
            send_message(chat_id, f"‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: {e}")
        except Exception:
            pass
        print("[MAIN_HANDLER ERROR]")
        print(traceback.format_exc())
