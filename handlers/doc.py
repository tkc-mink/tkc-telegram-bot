# handlers/doc.py
# -*- coding: utf-8 -*-
"""
Handler for processing and summarizing uploaded documents.
Stable + safe version, integrated with new memory system.
"""
from __future__ import annotations
import os
from typing import List, Tuple, Dict, Any

# ‚úÖ ‡πÉ‡∏ä‡πâ wrapper ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ (‡∏°‡∏µ retry/‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏Å‡∏±‡∏ô no-echo)
from utils.message_utils import send_message, send_typing_action
from utils.memory_store import append_message
from utils.doc_extract_utils import (
    extract_text_pdf, extract_text_docx,
    extract_text_xlsx, extract_text_pptx
)
from utils.telegram_file_utils import download_telegram_file
from function_calling import summarize_text_with_gpt

# --- Configuration ---
_CHUNK_CHARS = int(os.getenv("DOC_SUMMARY_CHUNK_CHARS", "6000"))
_MAX_CHUNKS   = int(os.getenv("DOC_SUMMARY_MAX_CHUNKS", "8"))
_MAX_FILE_MB  = int(os.getenv("DOC_MAX_FILE_MB", "25"))
_SUPPORTED_EXT = {".pdf", ".docx", ".xlsx", ".pptx", ".txt"}

# Limit ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á memory (‡∏Å‡∏±‡∏ô context ‡πÇ‡∏ï‡πÄ‡∏Å‡∏¥‡∏ô)
_MEMORY_SAVE_LIMIT = int(os.getenv("DOC_MEMORY_SAVE_LIMIT", "4000"))

# --- Helpers ---
def _human_mb(n_bytes: int) -> float:
    try:
        return round(n_bytes / (1024 * 1024), 2)
    except Exception:
        return 0.0

def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _split_text_smart(text: str, size: int) -> List[str]:
    text = (text or "").strip()
    if not text:
        return []
    paras = text.split("\n\n")
    chunks: List[str] = []
    buf: List[str] = []
    cur_len = 0
    for p in paras:
        p = p.strip()
        if not p:
            continue
        if len(p) > size:
            if buf:
                chunks.append("\n\n".join(buf).strip())
                buf, cur_len = [], 0
            # ‡∏ï‡∏±‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πà‡∏≠‡∏ô ‡πÜ
            for i in range(0, len(p), size):
                chunks.append(p[i:i + size])
            continue
        # ‡∏õ‡∏¥‡∏î‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏•‡πâ‡∏ô
        if cur_len + len(p) + (2 if buf else 0) > size:
            if buf:
                chunks.append("\n\n".join(buf).strip())
            buf, cur_len = [p], len(p)
        else:
            buf.append(p)
            cur_len += len(p) + (2 if len(buf) > 1 else 0)
    if buf:
        chunks.append("\n\n".join(buf).strip())
    return chunks

def _hierarchical_summarize(full_text: str) -> str:
    text = (full_text or "").strip()
    if not text:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
    if len(text) <= _CHUNK_CHARS:
        return summarize_text_with_gpt(text) or ""
    chunks = _split_text_smart(text, _CHUNK_CHARS)[:_MAX_CHUNKS]
    if not chunks:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ"
    partials = [
        summarize_text_with_gpt(f"[‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà {idx}/{len(chunks)}]\n{ck}") or ""
        for idx, ck in enumerate(chunks, 1)
    ]
    merged = "\n\n".join(f"- {p.strip()}" for p in partials if p.strip())
    final = summarize_text_with_gpt(
        "‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:\n\n" + merged
    ) or ""
    return final.strip() or "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ"

def _validate_document_meta(doc: dict) -> Tuple[bool, str]:
    file_name = doc.get("file_name", "document")
    ext = os.path.splitext(file_name)[1].lower()
    if ext not in _SUPPORTED_EXT:
        return False, "‚ùå ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå PDF, Word, Excel, PowerPoint ‡πÅ‡∏•‡∏∞ TXT ‡∏Ñ‡∏£‡∏±‡∏ö"
    size = doc.get("file_size")
    if isinstance(size, int) and size > _MAX_FILE_MB * 1024 * 1024:
        mb = _human_mb(size)
        return False, f"‚ùå ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({mb} MB) ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {_MAX_FILE_MB} MB ‡∏Ñ‡∏£‡∏±‡∏ö"
    return True, ""

# --- Entry Point ---
def handle_doc(user_info: Dict[str, Any], msg: Dict[str, Any]) -> None:
    """
    ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£, ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î, ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏™‡∏£‡∏∏‡∏õ, ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á memory
    - ‡πÉ‡∏ä‡πâ parse_mode=HTML ‡πÄ‡∏™‡∏°‡∏≠ (escape ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß)
    - ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    """
    chat_id = user_info["profile"]["user_id"]
    user_name = user_info["profile"].get("first_name") or ""

    doc = msg.get("document") or {}
    if not doc:
        send_message(chat_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö")
        return

    ok, why = _validate_document_meta(doc)
    if not ok:
        send_message(chat_id, _html_escape(why))
        return

    raw_name = doc.get("file_name", "document")
    safe_name = os.path.basename(raw_name)  # ‡∏Å‡∏±‡∏ô path traversal
    file_id = doc.get("file_id")
    size_mb = _human_mb(doc.get("file_size") or 0)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ñ‡∏≤‡∏ß‡∏£
    append_message(chat_id, "user", f"[‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {safe_name}]")

    # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    send_typing_action(chat_id, "typing")
    send_message(
        chat_id,
        f"üì• ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå <code>{_html_escape(safe_name)}</code> ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì {_html_escape(user_name)} ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö "
        f"(~{size_mb} MB)\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶",
        parse_mode="HTML",
    )

    local_path = None
    try:
        local_path = download_telegram_file(file_id, safe_name)
        if not local_path or not os.path.exists(local_path):
            send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Telegram ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö")
            return

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
        ext = os.path.splitext(safe_name)[1].lower()
        text = ""
        if ext == ".pdf":
            text = extract_text_pdf(local_path)
        elif ext == ".docx":
            text = extract_text_docx(local_path)
        elif ext == ".xlsx":
            text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel:\n" + (extract_text_xlsx(local_path) or "")
        elif ext == ".pptx":
            text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô PowerPoint:\n" + (extract_text_pptx(local_path) or "")
        elif ext == ".txt":
            with open(local_path, encoding="utf-8", errors="ignore") as f:
                text = f.read()

        text = (text or "").strip()
        if not text:
            send_message(chat_id, f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå <code>{_html_escape(safe_name)}</code> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
            return

        # ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (hierarchical)
        send_typing_action(chat_id, "typing")
        summary = _hierarchical_summarize(text)

        # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ
        final_message = f"üìÑ <b>‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå</b> <code>{_html_escape(safe_name)}</code>\n\n{_html_escape(summary)}"
        send_message(chat_id, final_message, parse_mode="HTML")

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß)
        to_save = final_message if len(final_message) <= _MEMORY_SAVE_LIMIT else (final_message[:_MEMORY_SAVE_LIMIT] + " ‚Ä¶")
        append_message(chat_id, "assistant", to_save)

    except Exception as e:
        err = _html_escape(str(e))
        error_message = f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {_html_escape(user_name)} ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå: <code>{err}</code>"
        send_message(chat_id, error_message, parse_mode="HTML")
        append_message(chat_id, "assistant", error_message)
    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏™‡∏°‡∏≠
        if local_path and os.path.exists(local_path):
            try:
                os.remove(local_path)
            except Exception as e:
                print(f"[handle_doc] Failed to remove temp file {local_path}: {e}")
