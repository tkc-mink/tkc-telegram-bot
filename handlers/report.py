# handlers/report.py
# -*- coding: utf-8 -*-
"""
Handler for generating system reports using utils.report_utils.get_system_report.
Stable + safe:
- ‡πÉ‡∏ä‡πâ utils.message_utils (retry/auto-chunk/no-echo) ‡πÅ‡∏•‡∏∞ typing action
- parse_mode=HTML ‡∏û‡∏£‡πâ‡∏≠‡∏° escape ‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á str / dict / list[dict]
- ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠/‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤/‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥/‡∏ï‡∏≤‡∏£‡∏≤‡∏á key:value ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
"""
from __future__ import annotations
from typing import Dict, Any, List, Iterable

from utils.message_utils import send_message, send_typing_action
from utils.report_utils import get_system_report  # ‚úÖ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà

# ===== Helpers =====
def _html_escape(s: str) -> str:
    s = s or ""
    return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _first_present(d: Dict[str, Any], keys: Iterable[str]) -> Any:
    for k in keys:
        if k in d and d[k] not in (None, ""):
            return d[k]
    return None

def _fmt_kv_block(d: Dict[str, Any], allow_keys: Iterable[str] | None = None, title: str | None = None) -> str:
    """
    ‡πÅ‡∏™‡∏î‡∏á key:value ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    - ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ allow_keys ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏à‡∏∞ dump ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
    """
    lines: List[str] = []
    if title:
        lines.append(f"<b>{_html_escape(title)}</b>")
    if allow_keys:
        for k in allow_keys:
            if k in d and d[k] not in (None, ""):
                lines.append(f"‚Ä¢ <code>{_html_escape(str(k))}</code>: {_html_escape(str(d[k]))}")
    else:
        for k, v in d.items():
            if v not in (None, ""):
                lines.append(f"‚Ä¢ <code>{_html_escape(str(k))}</code>: {_html_escape(str(v))}")
    return "\n".join(lines) if lines else ""

def _fmt_list_of_dicts(items: List[Dict[str, Any]], title: str) -> str:
    """
    ‡πÅ‡∏™‡∏î‡∏á list ‡∏Ç‡∏≠‡∏á dict ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:
    ‚Ä¢ #1 key1=val1 ¬∑ key2=val2 ...
    """
    if not items:
        return ""
    lines = [f"<b>{_html_escape(title)}</b>"]
    for i, it in enumerate(items, start=1):
        # ‡πÄ‡∏≠‡∏≤ key ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        primary = []
        for k in ("name", "user", "command", "keyword", "title"):
            if k in it and it[k] not in (None, ""):
                primary.append(f"{_html_escape(str(it[k]))}")
        head = " / ".join(primary) if primary else None

        # ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        kvs = []
        for k, v in it.items():
            if k in ("name", "user", "command", "keyword", "title"):
                continue
            if v in (None, ""):
                continue
            kvs.append(f"<code>{_html_escape(str(k))}</code>=<_>{_html_escape(str(v))}</_>")

        # ‡πÅ‡∏ó‡πá‡∏Å <_> ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‚Äú=‚Äù ‡πÉ‡∏ô value; ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏ó‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        meta = " ¬∑ ".join(kvs).replace("=<_>", "= ").replace("</_>", "")
        if head and meta:
            lines.append(f"‚Ä¢ #{i} <b>{head}</b> ‚Äî {meta}")
        elif head:
            lines.append(f"‚Ä¢ #{i} <b>{head}</b>")
        else:
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏î‡πà‡∏ô‡πÄ‡∏•‡∏¢ ‚Üí dump ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
            short = " ¬∑ ".join(kvs[:6]).replace("=<_>", "= ").replace("</_>", "")
            lines.append(f"‚Ä¢ #{i} {short}" if short else f"‚Ä¢ #{i}")
    return "\n".join(lines)

def _format_report_dict(d: Dict[str, Any]) -> str:
    """
    ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å dict ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô:
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô:
    - title / report_title
    - since / start / period_start
    - until / end / period_end
    - generated_at / generated / as_of
    - summary / stats (dict)
    - top_commands / top_users / errors / notes / items (list[dict] ‡∏´‡∏£‡∏∑‡∏≠ list[str])
    """
    if not d:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"

    title = _first_present(d, ("title", "report_title")) or "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
    since = _first_present(d, ("since", "start", "period_start"))
    until = _first_present(d, ("until", "end", "period_end"))
    genat = _first_present(d, ("generated_at", "generated", "as_of"))

    header_lines: List[str] = [f"üìä <b>{_html_escape(str(title))}</b>"]
    period_bits = []
    if since: period_bits.append(f"‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà <code>{_html_escape(str(since))}</code>")
    if until: period_bits.append(f"‡∏ñ‡∏∂‡∏á <code>{_html_escape(str(until))}</code>")
    if period_bits:
        header_lines.append("üóìÔ∏è " + " ‚Äî ".join(period_bits))
    if genat:
        header_lines.append(f"üïí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: <code>{_html_escape(str(genat))}</code>")

    # Summary/Stats
    blocks: List[str] = []
    summary = _first_present(d, ("summary", "stats", "metrics"))
    if isinstance(summary, dict):
        blocks.append(_fmt_kv_block(
            summary,
            allow_keys=("total_messages", "total_users", "active_users", "images", "tokens", "success_rate", "errors", "latency_avg_ms"),
            title="‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
        ))

    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏° / ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î / ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    for key, label in (
        ("top_commands", "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢"),
        ("top_users", "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î"),
        ("errors", "‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à"),
        ("items", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"),
        ("notes", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"),
    ):
        val = d.get(key)
        if isinstance(val, list) and val and isinstance(val[0], dict):
            blocks.append(_fmt_list_of_dicts(val, label))
        elif isinstance(val, list) and val:
            # ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏™‡∏ï‡∏£‡∏¥‡∏á
            safe = "\n".join(f"‚Ä¢ {_html_escape(str(x))}" for x in val)
            blocks.append(f"<b>{label}</b>\n{safe}")
        elif isinstance(val, dict):
            blocks.append(_fmt_kv_block(val, title=label))

    # ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    leftovers = {k: v for k, v in d.items() if k not in {
        "title", "report_title", "since", "start", "period_start", "until", "end", "period_end",
        "generated_at", "generated", "as_of", "summary", "stats", "metrics",
        "top_commands", "top_users", "errors", "items", "notes"
    } and v not in (None, "")}
    if leftovers:
        blocks.append(_fmt_kv_block(leftovers, title="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"))

    body = "\n\n".join(b for b in blocks if b)
    return "\n".join(header_lines) + ("\n\n" + body if body else "")

def _format_report_payload(payload: Any) -> str:
    # dict
    if isinstance(payload, dict):
        return _format_report_dict(payload)
    # list[dict]
    if isinstance(payload, list) and payload and isinstance(payload[0], dict):
        # ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        return _fmt_list_of_dicts(payload, "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    # str
    if isinstance(payload, str):
        s = payload.strip()
        return s if s else "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"
    # unknown
    return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"

# ===== Main Handler =====
def handle_report(user_info: Dict[str, Any], user_text: str) -> None:
    """
    Handles /report (‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‡∏à‡∏≤‡∏Å report_utils)
    - ‡πÅ‡∏™‡∏î‡∏á typing action ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    """
    chat_id = user_info["profile"]["user_id"]
    user_name = user_info["profile"].get("first_name") or ""

    try:
        # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        send_typing_action(chat_id, "typing")
        send_message(chat_id, "üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶", parse_mode="HTML")

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å utility (‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ util ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        data = get_system_report()

        # ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (wrapper ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á ‚â§4096 ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        msg = _format_report_payload(data)
        send_message(chat_id, msg, parse_mode="HTML")

    except Exception as e:
        print(f"[handle_report] ERROR: {e}")
        send_message(
            chat_id,
            f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {_html_escape(user_name)}, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö",
            parse_mode="HTML",
        )
