# handlers/crypto.py
# -*- coding: utf-8 -*-
from __future__ import annotations
from typing import Dict, Any, List
import re

from utils.finance_utils import get_crypto_price_from_google
from utils.message_utils import send_message, send_typing_action

# ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï (‡∏ä‡∏∑‡πà‡∏≠ ‚Üí ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
_NAME_TO_SYMBOL = {
    # ‡πÑ‡∏ó‡∏¢
    "‡∏ö‡∏¥‡∏ï‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå": "BTC",
    "‡∏ö‡∏¥‡∏ó‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå": "BTC",
    "‡∏≠‡∏µ‡πÄ‡∏ò‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏°": "ETH",
    "‡πÄ‡∏ó‡πÄ‡∏ò‡∏≠‡∏£‡πå": "USDT",
    "‡∏ö‡∏µ‡πÄ‡∏≠‡πá‡∏ô‡∏ö‡∏µ": "BNB",
    "‡∏ö‡∏¥‡πÄ‡∏≠‡∏ô‡∏ö‡∏µ": "BNB",
    "‡πÇ‡∏ã‡∏•‡∏≤‡∏ô‡∏≤": "SOL",
    "‡πÇ‡∏î‡∏ä‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå": "DOGE",
    "‡∏£‡∏¥‡∏õ‡πÄ‡∏õ‡∏¥‡∏•": "XRP",
    "‡∏£‡∏¥‡∏û‡πÄ‡∏û‡∏¥‡∏•": "XRP",
    "‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏≤‡πÇ‡∏ô": "ADA",
    # ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°)
    "bitcoin": "BTC",
    "ethereum": "ETH",
    "tether": "USDT",
    "binance": "BNB",
    "solana": "SOL",
    "dogecoin": "DOGE",
    "ripple": "XRP",
    "cardano": "ADA",
}

_SYMBOL_RE = re.compile(r"^[A-Z0-9]{2,15}$")
_MAX_SYMBOLS = 8  # ‡∏Å‡∏±‡∏ô spam/‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô

def _extract_symbols(user_text: str) -> List[str]:
    """
    ‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏Ñ‡∏±‡πà‡∏ô
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö $btc, btc, BTC
    - ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
    - ‡∏Å‡∏£‡∏≠‡∏á‡∏ã‡πâ‡∏≥, ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    """
    if not user_text:
        return []

    parts = user_text.strip().split()
    # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (/crypto)
    if parts and parts[0].lower().startswith("/crypto"):
        parts = parts[1:]

    out: List[str] = []
    seen = set()

    for raw in parts:
        if not raw:
            continue
        t = raw.strip().strip(",;|/").lstrip("$")  # ‡∏•‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ñ‡∏±‡πà‡∏ô‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°
        if not t:
            continue

        # map ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï ‚Üí symbol
        key = t.lower()
        if key in _NAME_TO_SYMBOL:
            sym = _NAME_TO_SYMBOL[key]
        else:
            sym = t.upper()

        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "price", "‡∏£‡∏≤‡∏Ñ‡∏≤"
        if sym.lower() in ("price", "‡∏£‡∏≤‡∏Ñ‡∏≤", "coin", "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"):
            continue

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
        if not _SYMBOL_RE.match(sym):
            continue

        if sym not in seen:
            seen.add(sym)
            out.append(sym)

        if len(out) >= _MAX_SYMBOLS:
            break

    return out

def _usage_text() -> str:
    return (
        "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:\n"
        "‚Ä¢ `/crypto BTC`\n"
        "‚Ä¢ `/crypto btc eth sol`\n"
        "‚Ä¢ `/crypto $btc ‡∏≠‡∏µ‡πÄ‡∏ò‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏° ‡πÇ‡∏ã‡∏•‡∏≤‡∏ô‡∏≤`\n"
        "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ñ‡∏±‡πà‡∏ô‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"
    )

def handle_crypto(user_info: Dict[str, Any], user_text: str) -> None:
    chat_id = user_info["profile"]["user_id"]
    try:
        symbols = _extract_symbols(user_text)

        if not symbols:
            send_message(chat_id, f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏Ñ‡∏£‡∏±‡∏ö\n\n{_usage_text()}")
            return

        # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        send_message(chat_id, f"üîé ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç: {' '.join(symbols)}")
        send_typing_action(chat_id, "typing")

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏ö‡∏ö‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô (‡∏Å‡∏±‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô)
        results: List[str] = []
        for sym in symbols:
            try:
                send_typing_action(chat_id, "typing")
                msg = get_crypto_price_from_google(sym)  # ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Markdown ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                if msg and isinstance(msg, str) and msg.strip():
                    results.append(msg.strip())
                else:
                    results.append(f"*{sym}*: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            except Exception as e:
                # ‡πÑ‡∏°‡πà‡πÄ‡∏ú‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡∏¥‡∏ö‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                print(f"[handle_crypto] fetch error for {sym}: {e}")
                results.append(f"*{sym}*: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ï‡∏±‡∏ß‡∏´‡πà‡∏≠ send_message ‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á 4096 ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        final_msg = "üìà *‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï*\n\n" + "\n\n".join(results)
        send_message(chat_id, final_msg, parse_mode="Markdown")

    except Exception as e:
        print(f"[handle_crypto] ERROR: {e}")
        send_message(chat_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
