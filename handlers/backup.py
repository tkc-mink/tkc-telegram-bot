# handlers/backup.py
# -*- coding: utf-8 -*-
"""
Telegram backup commands (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£/‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢):
  /backup_now
  /backup_status
  /list_snapshots
  /restore latest | /restore YYYY-MM-DD

‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î ENV (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢):
- SUPER_ADMIN_ID=<your_telegram_id>   # ‡∏´‡∏£‡∏∑‡∏≠ ADMIN_IDS=‡πÑ‡∏≠‡∏î‡∏µ‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤‡πÄ‡∏ã‡∏û‡∏≤‡∏£‡∏≤‡πÄ‡∏£‡∏ï
"""

from __future__ import annotations
from typing import Optional, Dict, Any, List
import os
import threading
from datetime import datetime

from utils.message_utils import send_message, send_typing_action
from utils.backup_utils import (
    backup_all,
    restore_all,
    get_backup_status,
    list_snapshots,
)

# ===== Admin guards (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢) =====
_ADMIN_IDS = set()
try:
    sa = (os.getenv("SUPER_ADMIN_ID") or "").strip()
    if sa:
        _ADMIN_IDS.add(int(sa))
    admin_ids = (os.getenv("ADMIN_IDS") or "").strip()
    if admin_ids:
        for x in admin_ids.split(","):
            x = x.strip()
            if x:
                _ADMIN_IDS.add(int(x))
except Exception:
    # ‡πÑ‡∏°‡πà‡πÇ‡∏¢‡∏ô‡∏ï‡πà‡∏≠: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô process ‡∏ï‡∏≤‡∏¢‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ENV ‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    pass

def is_admin(user_id: int | str) -> bool:
    try:
        uid = int(str(user_id))
    except Exception:
        return False
    # ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£/‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á ADMIN ‡πÄ‡∏•‡∏¢ ‚Üí ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    return uid in _ADMIN_IDS

# ===== Utilities =====
_inprogress_lock = threading.Lock()
_inprogress: Dict[str, bool] = {"backup": False, "restore": False}

def _html_escape(s: str) -> str:
    return (s or "").replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

def _short_id(s: Optional[str]) -> str:
    if not s:
        return "-"
    return s[:8] + "‚Ä¶" + s[-4:] if len(s) > 14 else s

def _format_status_for_telegram(status: Dict[str, Any]) -> str:
    ts = _html_escape(status.get("timestamp") or "-")
    ok = status.get("success", False)
    files = status.get("files", [])
    lines = [
        "<b>üì¶ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</b>",
        f"‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤: <code>{ts}</code>",
        f"‚Ä¢ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {'‚úÖ' if ok else '‚ùå'}",
        "",
        "<b>‡πÑ‡∏ü‡∏•‡πå</b>:",
    ]
    if files:
        for it in files:
            name = _html_escape(str(it.get("file", "-")))
            fid = _short_id(it.get("id"))
            okf = "‚úÖ" if it.get("ok") else "‚ùå"
            size = it.get("size") or "-"
            err = it.get("err")
            if err:
                err = _html_escape(str(err))
                lines.append(f"‚Ä¢ <code>{name}</code> {okf} (id={fid}, size={size}) ‚Äî <i>{err}</i>")
            else:
                lines.append(f"‚Ä¢ <code>{name}</code> {okf} (id={fid}, size={size})")
    else:
        lines.append("‚Ä¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô log")
    return "\n".join(lines)

def _with_progress(chat_id: int | str, kind: str, target, *args, **kwargs):
    # ‡∏Å‡∏±‡∏ô‡∏á‡∏≤‡∏ô‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (backup/restore)
    with _inprogress_lock:
        if _inprogress.get(kind):
            send_message(chat_id, f"‡∏≠‡∏µ‡∏Å‡∏á‡∏≤‡∏ô {kind} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
            return
        _inprogress[kind] = True

    def run():
        try:
            send_typing_action(chat_id)
            if args or kwargs:
                target(*args, **kwargs)
            else:
                target()
        except Exception as e:
            send_message(chat_id, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {kind}: <code>{_html_escape(str(e))}</code>", parse_mode="HTML")
        finally:
            with _inprogress_lock:
                _inprogress[kind] = False
            # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠
            try:
                st = get_backup_status()
                send_message(chat_id, _format_status_for_telegram(st), parse_mode="HTML")
            except Exception as e2:
                send_message(chat_id, f"‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: <code>{_html_escape(str(e2))}</code>", parse_mode="HTML")

    threading.Thread(target=run, daemon=True).start()

# ===== Entry for main_handler =====
def handle_backup_command(data: Dict[str, Any]) -> bool:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á/‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏ô Telegram
    ‡∏Ñ‡∏∑‡∏ô True ‡∏ñ‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ main_handler return ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)
    """
    try:
        msg = data.get("message") or data.get("edited_message") or {}
        chat = msg.get("chat", {}) or {}
        chat_id = chat.get("id")
        text = (msg.get("text") or msg.get("caption") or "").strip()
        user = msg.get("from", {}) or {}
        user_id = user.get("id")

        if not text:
            return False

        lower = text.lower().strip()

        # /backup_status ‚Äî ‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ (read-only)
        if lower.startswith("/backup_status"):
            st = get_backup_status()
            send_message(chat_id, _format_status_for_telegram(st), parse_mode="HTML")
            return True

        # ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if lower.startswith("/backup_now") or lower.startswith("/restore") or lower.startswith("/list_snapshots"):
            if not is_admin(user_id):
                send_message(chat_id, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö (‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á SUPER_ADMIN_ID/ADMIN_IDS)", parse_mode="HTML")
                return True

        # /backup_now
        if lower.startswith("/backup_now"):
            send_message(chat_id, "üóÇÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏∂‡πâ‡∏ô Google Drive‚Ä¶", parse_mode="HTML")
            _with_progress(chat_id, "backup", backup_all)
            return True

        # /list_snapshots
        if lower.startswith("/list_snapshots"):
            snaps = list_snapshots()
            if snaps:
                lines = ["<b>üóìÔ∏è Snapshots (‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏Å‡πà‡∏≤)</b>"] + [f"‚Ä¢ <code>{_html_escape(d)}</code>" for d in snaps]
                send_message(chat_id, "\n".join(lines), parse_mode="HTML")
            else:
                send_message(chat_id, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö snapshot ‡πÉ‡∏ô Google Drive ‡∏Ñ‡∏£‡∏±‡∏ö", parse_mode="HTML")
            return True

        # /restore latest | /restore YYYY-MM-DD
        if lower.startswith("/restore"):
            parts = text.split()
            date_text = parts[1].strip() if len(parts) >= 2 else ""
            if date_text in ("", "latest", "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "today", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"):
                send_message(chat_id, "‚è¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‚Ä¶", parse_mode="HTML")
                _with_progress(chat_id, "restore", restore_all, None)  # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏≤‡∏Å (latest)
                return True
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            try:
                datetime.strptime(date_text, "%Y-%m-%d")
            except Exception:
                send_message(chat_id, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö ‡πÉ‡∏ä‡πâ <code>/restore YYYY-MM-DD</code>", parse_mode="HTML")
                return True
            send_message(chat_id, f"‚è¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <code>{_html_escape(date_text)}</code> ‚Ä¶", parse_mode="HTML")
            _with_progress(chat_id, "restore", restore_all, date_text)
            return True

        return False
    except Exception as e:
        try:
            chat_id = ((data.get("message") or {}).get("chat") or {}).get("id")
            if chat_id:
                send_message(chat_id, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô backup handler: <code>{_html_escape(str(e))}</code>", parse_mode="HTML")
        except Exception:
            pass
        return False
