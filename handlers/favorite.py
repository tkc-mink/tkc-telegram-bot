# handlers/favorite.py
# -*- coding: utf-8 -*-
"""
Handler for user favorites, now fully integrated with the persistent database.
"""
from __future__ import annotations
from typing import Dict, Any

from utils.telegram_api import send_message
from utils.favorite_utils import add_new_favorite, get_user_favorites, remove_user_favorite

def handle_favorite(user_info: Dict[str, Any], user_text: str) -> None:
    """
    Handles favorite commands: /favorite_add, /favorite_list, /favorite_remove.
    """
    user_id = user_info['profile']['user_id']
    user_name = user_info['profile']['first_name']
    
    print(f"[handle_favorite] Request from user {user_name} (ID: {user_id})")

    try:
        text = user_text.strip().lower()

        # /favorite_add <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>
        if text.startswith("/favorite_add"):
            content = user_text.replace("/favorite_add", "", 1).strip()
            if not content:
                send_message(user_id, "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: /favorite_add <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å>")
                return
            if add_new_favorite(user_id, content):
                send_message(user_id, f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö, ‡∏Ñ‡∏∏‡∏ì {user_name}")
            else:
                send_message(user_id, "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            return

        # /favorite_list
        if text.startswith("/favorite_list"):
            favs = get_user_favorites(user_id, limit=10)
            if not favs:
                send_message(user_id, "ü§î ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÉ‡∏ä‡πâ /favorite_add ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
                return
            lines = [f"{i}. {item['content']}" for i, item in enumerate(favs, start=1)]
            msg = "‚≠ê **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:**\n" + "\n".join(lines)
            send_message(user_id, msg, parse_mode="Markdown")
            return

        # /favorite_remove <‡∏•‡∏≥‡∏î‡∏±‡∏ö>
        if text.startswith("/favorite_remove"):
            parts = user_text.split()
            if len(parts) < 2 or not parts[1].isdigit():
                send_message(user_id, "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÄ‡∏ä‡πà‡∏ô `/favorite_remove 2`")
                return
            idx = int(parts[1])
            if remove_user_favorite(user_id, idx):
                send_message(user_id, f"üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà {idx} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
            else:
                send_message(user_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
            return
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢
        help_text = (
            "**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î:**\n"
            "‚Ä¢ `/favorite_add <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>`\n"
            "‚Ä¢ `/favorite_list`\n"
            "‚Ä¢ `/favorite_remove <‡∏•‡∏≥‡∏î‡∏±‡∏ö>`"
        )
        send_message(user_id, help_text, parse_mode="Markdown")

    except Exception as e:
        print(f"[handle_favorite] An unhandled error occurred: {e}")
        send_message(user_id, f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì {user_name}, ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏£‡∏±‡∏ö")
