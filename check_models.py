# check_models.py
# -*- coding: utf-8 -*-
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OpenAI SDK v1.x
- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ (‡∏ï‡∏±‡∏î 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å)
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡∏±‡πâ‡∏ô ‡πÜ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á utils.openai_client ‡πÅ‡∏•‡∏∞ fallback SDK ‡∏ï‡∏£‡∏á)
‡∏£‡∏±‡∏ô:
  python check_models.py
  python check_models.py --model gpt-4o-mini
  python check_models.py --stream
"""

from __future__ import annotations
import os
import sys
import argparse
from typing import List, Dict, Any

# ===== Helpers =====
def _mask(s: str | None) -> str:
    if not s:
        return ""
    s = str(s)
    return s if len(s) <= 8 else f"{s[:4]}‚Ä¶{s[-4:]}"

def _env(name: str, default: str = "") -> str:
    return os.getenv(name, default)

# ===== Try project client first; fallback to SDK =====
_USING_PROJECT_CLIENT = False
client = None

def _init_client():
    global client, _USING_PROJECT_CLIENT
    try:
        # ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ wrapper ‡πÄ‡∏≠‡∏á
        from utils.openai_client import client as _client  # type: ignore
        client = _client
        _USING_PROJECT_CLIENT = True
        return
    except Exception:
        pass

    # Fallback: ‡πÉ‡∏ä‡πâ OpenAI SDK v1.x ‡∏ï‡∏£‡∏á ‡πÜ
    try:
        from openai import OpenAI  # type: ignore
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ openai: {e}\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install openai>=1.0.0")
        sys.exit(1)

    api_key = _env("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö OPENAI_API_KEY ‡πÉ‡∏ô Environment")
        sys.exit(1)

    # timeout ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å ENV ‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ
    timeout_sec = float(_env("OPENAI_TIMEOUT_SEC", "30") or "30")
    try:
        client = OpenAI(api_key=api_key, timeout=timeout_sec)
    except TypeError:
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô client ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö timeout ‡πÉ‡∏ô constructor
        client = OpenAI(api_key=api_key)

def list_models(limit: int = 50) -> List[str]:
    try:
        resp = client.models.list()
        data = getattr(resp, "data", []) or []
        ids = [getattr(m, "id", None) for m in data]
        ids = [i for i in ids if i][:limit]
        if not ids:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ API key ‡∏ô‡∏µ‡πâ")
        else:
            print("üîç ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà API key ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô):")
            for mid in ids:
                print("-", mid)
        return ids
    except Exception as e:
        print(f"‚ùå ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return []

def _sdk_chat_completion(messages: List[Dict[str, str]], model: str, stream: bool = False) -> str:
    """
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ fallback ‡πÑ‡∏õ SDK ‡∏ï‡∏£‡∏á ‡πÜ (openai>=1.x)
    """
    try:
        if stream:
            chunks = client.chat.completions.create(model=model, messages=messages, stream=True)
            out = []
            for ev in chunks:
                delta = (ev.choices[0].delta.content or "") if hasattr(ev.choices[0], "delta") else ""
                if delta:
                    out.append(delta)
                    # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏î ‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô (‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏à‡∏ö)
                    print(delta, end="", flush=True)
            if out:
                print()  # ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
            return "".join(out).strip()
        else:
            resp = client.chat.completions.create(model=model, messages=messages)
            return (resp.choices[0].message.content or "").strip()
    except Exception as e:
        raise RuntimeError(f"chat.completions.create error: {e}")

def quick_chat_test(model: str, stream: bool = False) -> str:
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'pong' ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    """
    messages = [
        {"role": "system", "content": "You are a helpful assistant that replies in Thai."},
        {"role": "user", "content": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'pong' ‡∏´‡∏ô‡πà‡∏≠‡∏¢"},
    ]

    if _USING_PROJECT_CLIENT:
        # ‡πÉ‡∏ä‡πâ wrapper ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        try:
            from utils.openai_client import chat_completion  # type: ignore
        except Exception as e:
            raise RuntimeError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö utils.openai_client.chat_completion: {e}")

        # wrapper ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö stream ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö non-stream
        return chat_completion(messages, model=model)

    # Fallback: SDK ‡∏ï‡∏£‡∏á ‡πÜ
    return _sdk_chat_completion(messages, model=model, stream=stream)

def main():
    _init_client()

    parser = argparse.ArgumentParser(description="OpenAI connectivity check (models + quick chat)")
    parser.add_argument("--model", type=str, default=_env("OPENAI_MODEL", "gpt-4o-mini"),
                        help="‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å OPENAI_MODEL ‡∏´‡∏£‡∏∑‡∏≠ gpt-4o-mini)")
    parser.add_argument("--stream", action="store_true", help="‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏° (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î SDK ‡∏ï‡∏£‡∏á)")
    args = parser.parse_args()

    print("== OpenAI Connectivity Check ==")
    print("‚Ä¢ Using project client:", "yes" if _USING_PROJECT_CLIENT else "no")
    print("‚Ä¢ OPENAI_API_KEY:", _mask(_env("OPENAI_API_KEY")))
    print("‚Ä¢ Model for chat test:", args.model)
    if args.stream and _USING_PROJECT_CLIENT:
        print("  (‚ÑπÔ∏è ‡πÇ‡∏´‡∏°‡∏î stream ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ fallback ‡πÑ‡∏õ SDK ‡∏ï‡∏£‡∏á)")

    # 1) list models
    list_models(limit=50)

    # 2) quick chat test
    try:
        print("\n== Quick Chat Test ==")
        reply = quick_chat_test(args.model, stream=args.stream and not _USING_PROJECT_CLIENT)
        print("üí¨ Reply:", reply)
    except Exception as e:
        print(f"‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        sys.exit(2)

    print("\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")

if __name__ == "__main__":
    main()
