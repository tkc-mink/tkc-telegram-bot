import os
import requests
from datetime import datetime

OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

def get_weather_by_coords(lat, lon):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 7 ‡∏ß‡∏±‡∏ô ‡∏î‡πâ‡∏ß‡∏¢ OpenWeather One Call API 3.0
    :param lat: ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (float)
    :param lon: ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (float)
    :return: dict ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    """
    if not OPENWEATHER_API_KEY:
        print("[OpenWeather] Missing API key")
        return None
    
    url = (
        f"https://api.openweathermap.org/data/3.0/onecall"
        f"?lat={lat}&lon={lon}&exclude=minutely,hourly,alerts"
        f"&units=metric&lang=th&appid={OPENWEATHER_API_KEY}"
    )
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"[OpenWeather] API error {response.status_code}: {response.text}")
            return None
    except requests.RequestException as e:
        print(f"[OpenWeather] Request exception: {e}")
        return None

def format_weather_summary(weather_data):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON
    :param weather_data: dict JSON ‡∏à‡∏≤‡∏Å get_weather_by_coords()
    :return: str ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    """
    if not weather_data:
        return "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

    current = weather_data.get("current", {})
    daily = weather_data.get("daily", [])

    temp = current.get("temp", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
    weather_desc = current.get("weather", [{}])[0].get("description", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
    humidity = current.get("humidity", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
    wind_speed = current.get("wind_speed", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")

    msg = f"üå§Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ {temp}¬∞C, {weather_desc}\n"
    msg += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô {humidity}% ‡∏•‡∏° {wind_speed} ‡πÄ‡∏°‡∏ï‡∏£/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\n"
    
    if daily:
        msg += "üìÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® 7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤:\n"
        for day in daily[:7]:
            dt = day.get("dt")
            temp_min = day.get("temp", {}).get("min", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
            temp_max = day.get("temp", {}).get("max", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
            desc = day.get("weather", [{}])[0].get("description", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
            date_str = datetime.utcfromtimestamp(dt).strftime("%a, %d %b") if dt else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô"
            msg += f"{date_str}: {desc}, {temp_min}¬∞C - {temp_max}¬∞C\n"
    else:
        msg += "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n"

    return msg
