# weather_utils.py

import os
import re
import requests
from datetime import datetime

# ‡∏≠‡πà‡∏≤‡∏ô API Key ‡∏à‡∏≤‡∏Å ENV
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

def get_weather_by_coords(lat: float, lon: float) -> dict | None:
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (7 ‡∏ß‡∏±‡∏ô) ‡∏î‡πâ‡∏ß‡∏¢ One Call API 3.0
    :param lat: ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î
    :param lon: ‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
    :return: dict JSON ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    """
    if not OPENWEATHER_API_KEY:
        print("[weather_utils] Missing OPENWEATHER_API_KEY")
        return None

    url = (
        f"https://api.openweathermap.org/data/3.0/onecall"
        f"?lat={lat}&lon={lon}"
        f"&exclude=minutely,hourly,alerts"
        f"&units=metric&lang=th"
        f"&appid={OPENWEATHER_API_KEY}"
    )
    try:
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            return resp.json()
        print(f"[weather_utils] API error {resp.status_code}: {resp.text}")
    except requests.RequestException as e:
        print(f"[weather_utils] RequestException: {e}")
    return None

def geocode_city(city: str) -> tuple[float, float] | None:
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á/‡∏ï‡∏≥‡∏ö‡∏•/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î lat/lon ‡∏î‡πâ‡∏ß‡∏¢ Geocoding API ‡∏Ç‡∏≠‡∏á OpenWeather
    :param city: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô "Bangkok" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"
    :return: (lat, lon) ‡∏´‡∏£‡∏∑‡∏≠ None
    """
    if not OPENWEATHER_API_KEY:
        return None

    url = (
        f"http://api.openweathermap.org/geo/1.0/direct"
        f"?q={requests.utils.quote(city)}&limit=1"
        f"&appid={OPENWEATHER_API_KEY}"
    )
    try:
        resp = requests.get(url, timeout=5)
        if resp.status_code == 200:
            data = resp.json()
            if data:
                return data[0]["lat"], data[0]["lon"]
    except requests.RequestException as e:
        print(f"[weather_utils] Geocoding error: {e}")
    return None

def format_weather_summary(data: dict) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å JSON
    :param data: JSON ‡∏à‡∏≤‡∏Å get_weather_by_coords()
    :return: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á Telegram
    """
    if not data:
        return "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

    # ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current = data.get("current", {})
    temp    = current.get("temp", "‚Äì")
    desc    = current.get("weather", [{}])[0].get("description", "‚Äì")
    humid   = current.get("humidity", "‚Äì")
    wind    = current.get("wind_speed", "‚Äì")

    msg  = f"üå§Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n"
    msg += f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ {temp}¬∞C, {desc}\n"
    msg += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô {humid}% ‡∏•‡∏° {wind} ‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\n"

    # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
    daily = data.get("daily", [])
    if daily:
        msg += "üìÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤:\n"
        for d in daily[:7]:
            dt   = d.get("dt")
            min_t = d.get("temp", {}).get("min", "‚Äì")
            max_t = d.get("temp", {}).get("max", "‚Äì")
            ddesc = d.get("weather", [{}])[0].get("description", "‚Äì")
            date_str = datetime.utcfromtimestamp(dt).strftime("%a, %d %b") if dt else "‚Äì"
            msg += f"{date_str}: {ddesc}, {min_t}¬∞C‚Äì{max_t}¬∞C\n"
    else:
        msg += "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n"

    return msg

def get_weather_forecast(text: str | None = None, lat: float | None = None, lon: float | None = None) -> str:
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô wrapper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö handlers.py
    :param text: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å user (‡πÉ‡∏ä‡πâ parse ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏î‡πâ)
    :param lat: ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    :param lon: ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    :return: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    """
    # 1) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏õ
    if lat is not None and lon is not None:
        data = get_weather_by_coords(lat, lon)
        return format_weather_summary(data)

    # 2) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‡πÅ‡∏ï‡πà user ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏ô text
    city = None
    if text:
        m = re.search(r"(‡∏ó‡∏µ‡πà|in)\s*([‡∏Å-‡πôA-Za-z\s]+)", text)
        if m:
            city = m.group(2).strip()

    # 3) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î default ‡πÄ‡∏°‡∏∑‡∏≠‡∏á
    query_city = city or "Bangkok"

    # 4) ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î
    coords = geocode_city(query_city)
    if coords:
        lat, lon = coords
        data = get_weather_by_coords(lat, lon)
        return format_weather_summary(data)

    # 5) ‡∏ñ‡πâ‡∏≤ geocode ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á '{query_city}' ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS"

