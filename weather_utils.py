# weather_utils.py
import os
import re
import requests
from datetime import datetime
from typing import Optional, Tuple, Any

OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
DEFAULT_LAT, DEFAULT_LON = 13.736717, 100.523186

def get_weather_by_coords(lat: float, lon: float) -> Optional[dict]:
    """‡∏î‡∏∂‡∏á weather data ‡∏à‡∏≤‡∏Å OpenWeather API (One Call)"""
    if not OPENWEATHER_API_KEY:
        print("[weather_utils] Missing OPENWEATHER_API_KEY")
        return None
    url = (
        f"https://api.openweathermap.org/data/2.5/onecall?"
        f"lat={lat}&lon={lon}&exclude=minutely,hourly,alerts&units=metric&lang=th"
        f"&appid={OPENWEATHER_API_KEY}"
    )
    try:
        resp = requests.get(url, timeout=10)
        if resp.status_code == 401:
            return {"error": "API KEY ‡∏ú‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏"}
        if resp.status_code == 429:
            return {"error": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ API ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô quota ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"}
        if resp.status_code == 200:
            return resp.json()
        print(f"[weather_utils] API error {resp.status_code}: {resp.text[:200]}")
        return {"error": f"API error: {resp.status_code}"}
    except Exception as e:
        print(f"[weather_utils] RequestException: {e}")
        return {"error": str(e)}

def geocode_city(city: str) -> Optional[Tuple[float, float]]:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô lat/lon (OpenWeather geocoding)"""
    if not OPENWEATHER_API_KEY:
        print("[weather_utils] Missing OPENWEATHER_API_KEY for geocode")
        return None
    city = re.sub(r"[^‡∏Å-‡πôa-zA-Z0-9\s]", "", city)
    url = (
        f"http://api.openweathermap.org/geo/1.0/direct?"
        f"q={requests.utils.quote(city)}&limit=1&appid={OPENWEATHER_API_KEY}"
    )
    try:
        resp = requests.get(url, timeout=5)
        if resp.status_code != 200:
            print(f"[weather_utils] Geocode failed: {resp.status_code}")
            return None
        data = resp.json()
        if isinstance(data, list) and data:
            return data[0]["lat"], data[0]["lon"]
    except Exception as e:
        print(f"[weather_utils] Geocoding error: {e}")
    return None

def format_weather_summary(data: dict) -> str:
    """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
    if not data or "current" not in data:
        if isinstance(data, dict) and data.get("error"):
            return f"‚ùå {data['error']}"
        return "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
    cur = data.get("current", {})
    t = cur.get("temp", "‚Äì")
    desc = cur.get("weather", [{}])[0].get("description", "‚Äì")
    hum = cur.get("humidity", "‚Äì")
    wind = cur.get("wind_speed", "‚Äì")
    msg = f"üå§Ô∏è ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ {desc}, {t}¬∞C\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô {hum}%, ‡∏•‡∏° {wind} ‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\n"
    daily = data.get("daily", [])
    if daily:
        msg += "üìÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤:\n"
        for d in daily[:7]:
            try:
                date = datetime.utcfromtimestamp(d["dt"]).strftime("%a, %d %b")
                tmin = d.get("temp", {}).get("min", "‚Äì")
                tmax = d.get("temp", {}).get("max", "‚Äì")
                w = d.get("weather", [{}])[0].get("description", "‚Äì")
                msg += f"{date}: {w}, {tmin}¬∞C‚Äì{tmax}¬∞C\n"
            except Exception:
                continue
    else:
        msg += "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n"
    return msg

def extract_city_from_text(text: str) -> Optional[str]:
    # ‡∏•‡∏≠‡∏á parse ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏™
    if not text:
        return None
    patterns = [
        r"(?:‡∏≠‡∏≤‡∏Å‡∏≤‡∏®|weather|‡∏ó‡∏µ‡πà|in)\s*([‡∏Å-‡πôA-Za-z\s]{2,})",
        r"‡∏ó‡∏µ‡πà\s*([‡∏Å-‡πôA-Za-z\s]{2,})",
        r"in\s*([A-Za-z\s]{2,})",
    ]
    for pat in patterns:
        m = re.search(pat, text, re.IGNORECASE)
        if m:
            return m.group(1).strip()
    return None

def get_weather_forecast(text: Optional[str] = None, lat: Optional[float] = None, lon: Optional[float] = None) -> str:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®/‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ‡∏à‡∏≤‡∏Å lat/lon ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø‡πÄ‡∏õ‡πá‡∏ô default
    """
    # 1) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‚Üí ‡∏î‡∏∂‡∏á‡∏ï‡∏£‡∏á
    if lat is not None and lon is not None:
        return format_weather_summary(get_weather_by_coords(lat, lon) or {})

    # 2) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á
    city = extract_city_from_text(text or "")
    if city:
        coords = geocode_city(city)
        if coords:
            return format_weather_summary(get_weather_by_coords(*coords) or {})
        # fallback: ‡∏ñ‡πâ‡∏≤ geo ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á
        return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{city}'"

    # 3) fallback ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø
    summary = format_weather_summary(get_weather_by_coords(DEFAULT_LAT, DEFAULT_LON) or {})
    return "‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default:\n" + summary
