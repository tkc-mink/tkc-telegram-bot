# weather_utils.py

import os
import re
import requests
from datetime import datetime
from typing import Optional, Tuple, Any

# ‚îÄ‚îÄ‚îÄ Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø
DEFAULT_LAT, DEFAULT_LON = 13.736717, 100.523186

# ‚îÄ‚îÄ‚îÄ Core: One Call v2.5 (‡∏ü‡∏£‡∏µ 1,000 calls/day) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_weather_by_coords(lat: float, lon: float) -> Optional[dict[str, Any]]:
    if not OPENWEATHER_API_KEY:
        print("[weather_utils] Missing OPENWEATHER_API_KEY")
        return None

    url = (
        f"https://api.openweathermap.org/data/2.5/onecall"
        f"?lat={lat}&lon={lon}"
        f"&exclude=minutely,hourly,alerts"
        f"&units=metric&lang=th"
        f"&appid={OPENWEATHER_API_KEY}"
    )
    try:
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            return resp.json()
        print(f"[weather_utils] API error {resp.status_code}: {resp.text}")
    except requests.RequestException as e:
        print(f"[weather_utils] RequestException: {e}")
    return None

def geocode_city(city: str) -> Optional[Tuple[float, float]]:
    if not OPENWEATHER_API_KEY:
        return None

    url = (
        f"http://api.openweathermap.org/geo/1.0/direct"
        f"?q={requests.utils.quote(city)}&limit=1"
        f"&appid={OPENWEATHER_API_KEY}"
    )
    try:
        resp = requests.get(url, timeout=5)
        if resp.status_code == 200:
            data = resp.json()
            if isinstance(data, list) and data:
                return data[0]["lat"], data[0]["lon"]
    except requests.RequestException as e:
        print(f"[weather_utils] Geocoding error: {e}")
    return None

# ‚îÄ‚îÄ‚îÄ Formatter ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def format_weather_summary(data: dict[str, Any]) -> str:
    if not data:
        return "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

    cur = data.get("current", {})
    t    = cur.get("temp", "‚Äì")
    desc = cur.get("weather", [{}])[0].get("description", "‚Äì")
    hum  = cur.get("humidity", "‚Äì")
    wind = cur.get("wind_speed", "‚Äì")

    msg  = f"üå§Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n"
    msg += f"‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ {t}¬∞C, {desc}\n"
    msg += f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô {hum}% ‡∏•‡∏° {wind} ‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\n"

    daily = data.get("daily", [])
    if daily:
        msg += "üìÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 7 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤:\n"
        for d in daily[:7]:
            dt    = d.get("dt")
            tmin  = d.get("temp", {}).get("min", "‚Äì")
            tmax  = d.get("temp", {}).get("max", "‚Äì")
            ddesc = d.get("weather", [{}])[0].get("description", "‚Äì")
            date  = datetime.utcfromtimestamp(dt).strftime("%a, %d %b") if dt else "‚Äì"
            msg  += f"{date}: {ddesc}, {tmin}¬∞C‚Äì{tmax}¬∞C\n"
    else:
        msg += "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤\n"

    return msg

# ‚îÄ‚îÄ‚îÄ Public Wrapper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def get_weather_forecast(
    text: Optional[str] = None,
    lat: Optional[float] = None,
    lon: Optional[float] = None
) -> str:
    # 1) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î ‚Üí ‡∏î‡∏∂‡∏á‡∏ï‡∏£‡∏á
    if lat is not None and lon is not None:
        return format_weather_summary(get_weather_by_coords(lat, lon) or {})

    # 2) ‡∏•‡∏≠‡∏á parse ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å text
    city = None
    if text:
        m = re.search(r"(‡∏ó‡∏µ‡πà|in)\s*([‡∏Å-‡πôA-Za-z\s]+)", text)
        if m:
            city = m.group(2).strip()

    if city:
        coords = geocode_city(city)
        if coords:
            return format_weather_summary(get_weather_by_coords(*coords) or {})

    # 3) fallback ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø
    summary = format_weather_summary(get_weather_by_coords(DEFAULT_LAT, DEFAULT_LON) or {})
    return "‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default:\n" + summary
