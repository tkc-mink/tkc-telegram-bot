import requests
from bs4 import BeautifulSoup
from datetime import datetime

def get_gold_price():
    try:
        url = "https://finance.sanook.com/economic/goldrate/"
        headers = {
            "User-Agent": (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/125.0.0.0 Safari/537.36"
            )
        }
        resp = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(resp.text, "html.parser")
        table = soup.find("table", class_="tbl_gold")

        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏à‡∏≠ table ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not table:
            print("[gold_utils] ‡πÑ‡∏°‡πà‡∏û‡∏ö table sanook")
            return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏à‡∏≤‡∏Å sanook ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

        # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        dateinfo = ""
        dateblock = soup.find("div", class_="date-update")
        if dateblock:
            dateinfo = dateblock.get_text(strip=True)
        else:
            # fallback: ‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            dateinfo = datetime.now().strftime("%d/%m/%Y")

        prices = []
        for row in table.find_all("tr"):
            cols = [c.get_text(strip=True) for c in row.find_all("td")]
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥: [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠, ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å, ‡∏£‡∏≤‡∏Ñ‡∏≤]
            if len(cols) >= 5 and ("‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á" in cols[0] or "‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì" in cols[0]):
                prices.append(
                    f"{cols[0]}:\n"
                    f"‚Ä¢ ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠: {cols[2]}\n"
                    f"‚Ä¢ ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å: {cols[4]}"
                )
            # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡∏Å‡∏£‡∏ì‡∏µ DOM ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
            elif len(cols) >= 3 and ("‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠" in cols[0] or "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å" in cols[0]):
                prices.append(f"{cols[0]} {cols[1]} {cols[2]}")

        # Fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
        if not prices:
            # ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ "‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠"/"‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å" ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ DOM ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            for row in table.find_all("tr"):
                txt = " ".join([c.get_text(strip=True) for c in row.find_all("td")])
                if "‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠" in txt or "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å" in txt:
                    prices.append(txt)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        if prices:
            out = "üìä ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (Sanook)\n"
            out += f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {dateinfo}\n"
            out += "\n".join(prices)
            return out
        else:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á sanook (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)"

    except Exception as e:
        print(f"[gold_utils] error: {e}")
        return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á sanook ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
