import os
import json
from datetime import datetime
import requests

from search_utils import robust_image_search
from review_utils import set_review, need_review_today
from history_utils import log_message, get_user_history
from weather_utils import get_weather_forecast
from gold_utils import get_gold_price
from news_utils import get_news

TELEGRAM_TOKEN       = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY       = os.getenv("OPENAI_API_KEY")

USAGE_FILE           = "usage.json"
IMAGE_USAGE_FILE     = "image_usage.json"
CONTEXT_FILE         = "context_history.json"
LOCATION_FILE        = "location_logs.json"

MAX_QUESTION_PER_DAY = 30
MAX_IMAGE_PER_DAY    = 15
EXEMPT_USER_IDS      = ["6849909227"]  # ‡πÄ‡∏û‡∏¥‡πà‡∏° id ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÇ‡∏î‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î

# --- JSON I/O Helpers ---
def load_json_safe(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json_safe(data, path):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[save_json_safe:{path}] {e}")

# --- Usage Counting ---
def check_and_increase_usage(user_id, filepath, limit):
    today = datetime.now().strftime("%Y-%m-%d")
    usage = load_json_safe(filepath)
    usage.setdefault(today, {})
    usage[today].setdefault(user_id, 0)
    if usage[today][user_id] >= limit:
        return False
    usage[today][user_id] += 1
    save_json_safe(usage, filepath)
    return True

# --- Context Memory ---
def load_context():
    return load_json_safe(CONTEXT_FILE)

def save_context(ctx):
    save_json_safe(ctx, CONTEXT_FILE)

def update_context(user_id, text):
    ctx = load_context()
    ctx.setdefault(user_id, []).append(text)
    ctx[user_id] = ctx[user_id][-5:]
    save_context(ctx)

def get_context(user_id):
    return load_context().get(user_id, [])

def is_waiting_review(user_id):
    ctx = get_context(user_id)
    return ctx and ctx[-1] == "__wait_review__"

# --- Location Logging ---
def load_location():
    return load_json_safe(LOCATION_FILE)

def save_location(loc):
    save_json_safe(loc, LOCATION_FILE)

def update_location(user_id, lat, lon):
    loc = load_location()
    loc[user_id] = {"lat": lat, "lon": lon, "ts": datetime.now().isoformat()}
    save_location(loc)

def get_user_location(user_id):
    return load_location().get(user_id)

# --- Telegram Send Helpers ---
def send_message(chat_id, text):
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": text},
            timeout=5
        )
    except Exception as e:
        print(f"[send_message] {e}")

def send_photo(chat_id, photo_url, caption=None):
    payload = {"chat_id": chat_id, "photo": photo_url}
    if caption:
        payload["caption"] = caption
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto",
            json=payload,
            timeout=5
        )
    except Exception as e:
        print(f"[send_photo] {e}")

def ask_for_location(chat_id, text="üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"):
    keyboard = {
        "keyboard": [
            [ {"text": "üìç ‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", "request_location": True} ]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    payload = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": keyboard
    }
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json=payload,
            timeout=5
        )
    except Exception as e:
        print(f"[ask_for_location] {e}")

# --- Intent Mapping: ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏• ---
def intent_liveinfo(user_txt):
    txt = user_txt.lower()
    # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á
    if any(kw in txt for kw in ["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á", "‡∏ó‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á", "‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì", "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥"]):
        return get_gold_price()
    # ‡∏Ç‡πà‡∏≤‡∏ß
    if any(kw in txt for kw in ["‡∏Ç‡πà‡∏≤‡∏ß", "‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "breaking news", "headline"]):
        return get_news(txt)
    # ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®/‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    if any(kw in txt for kw in ["‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "weather", "‡∏ù‡∏ô", "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå", "‡∏ù‡∏ô‡∏ï‡∏Å", "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", "‡∏£‡πâ‡∏≠‡∏ô", "‡∏´‡∏ô‡∏≤‡∏ß"]):
        return get_weather_forecast(text=txt)
    # ‡∏´‡∏∏‡πâ‡∏ô
    if any(kw in txt for kw in ["‡∏´‡∏∏‡πâ‡∏ô", "set index", "‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô", "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏´‡∏∏‡πâ‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô", "‡∏´‡∏∏‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    # ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô
    if any(kw in txt for kw in ["‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏î‡∏µ‡πÄ‡∏ã‡∏•", "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô", "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    # ‡∏´‡∏ß‡∏¢/‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà
    if any(kw in txt for kw in ["‡∏´‡∏ß‡∏¢", "‡∏ú‡∏•‡∏™‡∏•‡∏≤‡∏Å", "‡∏™‡∏•‡∏≤‡∏Å‡∏Å‡∏¥‡∏ô‡πÅ‡∏ö‡πà‡∏á", "‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà", "‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà", "‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏ß‡∏¢"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏´‡∏ß‡∏¢ (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    # ‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï
    if any(kw in txt for kw in ["bitcoin", "btc", "‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï", "crypto", "ethereum", "eth", "dogecoin"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    # ‡∏ö‡∏≠‡∏•/‡∏ú‡∏•‡∏ö‡∏≠‡∏•/‡∏Å‡∏µ‡∏¨‡∏≤‡∏™‡∏î
    if any(kw in txt for kw in ["‡∏ú‡∏•‡∏ö‡∏≠‡∏•", "‡∏™‡∏Å‡∏≠‡∏£‡πå", "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•", "score", "‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏™‡∏î"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏™‡∏î (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    if any(kw in txt for kw in ["‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô", "usd", "‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó", "‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô", "exchange rate", "dollar"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏©‡∏ï‡∏£
    if any(kw in txt for kw in ["‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡∏≤‡∏á", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏≤‡∏•‡πå‡∏°", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏©‡∏ï‡∏£ (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏û
    if any(kw in txt for kw in ["‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü", "‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥", "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏û", "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"]):
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤)"
    return None  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç

# --- Image Search ---
def generate_image_search_keyword(user_text, context_history):
    try:
        # ‡πÉ‡∏ä‡πâ GPT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á keyword ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏£‡∏π‡∏õ
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        system_prompt = (
            "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏≤‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• "
            "‡πÅ‡∏•‡∏∞ output ‡πÄ‡∏õ‡πá‡∏ô keyword ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"
        )
        messages = [{"role":"system","content":system_prompt}]
        for prev in context_history[-2:]:
            messages.append({"role":"user","content":prev})
        messages.append({"role":"user","content":user_text})
        resp = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=50,
            temperature=0.7
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        print(f"[generate_image_search_keyword] {e}")
        return user_text

def handle_image_search(chat_id, user_id, text, ctx):
    if user_id not in EXEMPT_USER_IDS:
        if not check_and_increase_usage(user_id, IMAGE_USAGE_FILE, MAX_IMAGE_PER_DAY):
            send_message(chat_id, f"‚ùå ‡∏Ñ‡∏£‡∏ö {MAX_IMAGE_PER_DAY} ‡∏£‡∏π‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
            return
    kw = generate_image_search_keyword(text, ctx)
    imgs = robust_image_search(kw)
    if imgs:
        for url in imgs[:3]:
            send_photo(chat_id, url, caption=f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {kw}")
    else:
        send_message(chat_id, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{kw}'")

# --- Main Handler ---
def handle_message(data):
    msg = data.get("message", {})
    chat_id = msg.get("chat", {}).get("id")
    if not chat_id:
        return

    user_text = msg.get("caption", "") or msg.get("text", "")
    user_id   = str(chat_id)

    # 1) ‡∏£‡∏±‡∏ö Location
    if "location" in msg:
        lat = msg["location"].get("latitude")
        lon = msg["location"].get("longitude")
        if lat is not None and lon is not None:
            update_location(user_id, lat, lon)
            send_message(chat_id, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        else:
            send_message(chat_id, "‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà")
        return

    # 1a) ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    if user_text.strip() == "üìç ‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì":
        ask_for_location(chat_id)
        return

    # 2) Update Context
    update_context(user_id, user_text)
    ctx = get_context(user_id)

    # 3) /my_history
    if user_text.strip() == "/my_history":
        history = get_user_history(user_id, limit=10)
        if not history:
            send_message(chat_id, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        else:
            out = "\n\n".join(f"[{it['date']}] ‚ùì{it['q']}\n‚û°Ô∏è {it['a']}" for it in history)
            send_message(chat_id, f"‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 10 ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n\n{out}")
        return

    # 4) ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    if need_review_today(user_id) and not is_waiting_review(user_id):
        send_message(chat_id, "‚ùì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (1-5):")
        update_context(user_id, "__wait_review__")
        return
    if is_waiting_review(user_id) and user_text.strip() in ["1","2","3","4","5"]:
        set_review(user_id, int(user_text.strip()))
        send_message(chat_id, "‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!")
        return

    # 5) ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
    if user_id not in EXEMPT_USER_IDS:
        if not check_and_increase_usage(user_id, USAGE_FILE, MAX_QUESTION_PER_DAY):
            send_message(chat_id, f"‚ùå ‡∏Ñ‡∏£‡∏ö {MAX_QUESTION_PER_DAY} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            return

    txt = user_text.lower()
    loc = get_user_location(user_id)

    # 6) ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    if "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®" in txt or "weather" in txt:
        if loc and loc.get("lat") and loc.get("lon"):
            reply = get_weather_forecast(text=None, lat=loc["lat"], lon=loc["lon"])
            send_message(chat_id, reply)
        else:
            ask_for_location(chat_id)
        return

    # 7) ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå intent live info (‡∏ó‡∏≠‡∏á, ‡∏Ç‡πà‡∏≤‡∏ß, ‡∏´‡∏ß‡∏¢, ‡∏´‡∏∏‡πâ‡∏ô, ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏Ø‡∏•‡∏Ø)
    liveinfo = intent_liveinfo(user_text)
    if liveinfo:
        log_message(user_id, user_text, liveinfo)
        send_message(chat_id, liveinfo)
        return

    # 8) ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if any(k in txt for k in ["‡∏Ç‡∏≠‡∏£‡∏π‡∏õ","‡∏£‡∏π‡∏õ","image","photo"]):
        handle_image_search(chat_id, user_id, user_text, ctx)
        log_message(user_id, user_text, "‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏î‡∏π‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó)")
        return

    # 9) fallback ‚Üí GPT-4o (‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        resp = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": user_text}],
            temperature=0.4
        )
        reply = resp.choices[0].message.content.strip()
    except Exception as e:
        print(f"[GPT fallback] {e}")
        reply = "‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

    log_message(user_id, user_text, reply)
    send_message(chat_id, reply)
