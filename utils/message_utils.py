# utils/message_utils.py
# -*- coding: utf-8 -*-
"""
Thin wrapper ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÉ‡∏ï‡πâ‡∏ó‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ utils.telegram_api
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á TELEGRAM_BOT_TOKEN ‡πÅ‡∏•‡∏∞ TELEGRAM_TOKEN
- ‡πÑ‡∏°‡πà raise error ‡∏ñ‡πâ‡∏≤ token ‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏à‡∏∞ log ‡πÅ‡∏•‡πâ‡∏ß return ‡πÄ‡∏â‡∏¢ ‡πÜ)
- ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡∏ù‡∏±‡πà‡∏á telegram_api ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏´‡πá‡∏ô status/resp ‡∏ä‡∏±‡∏î
"""

from __future__ import annotations
from typing import Optional, Dict, Any
import os
import json

# ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏î‡∏µ‡∏ö‡∏±‡∏Å
from utils.telegram_api import (
    send_message as tg_send_message,
    send_photo   as tg_send_photo,
)

def _get_token() -> str:
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ token ‡∏à‡∏≤‡∏Å ENV (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠) ‚Äî ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log/info ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
    return (
        os.getenv("TELEGRAM_BOT_TOKEN")
        or os.getenv("TELEGRAM_TOKEN")
        or ""
    ).strip()

def _log(tag: str, **kw):
    print(f"[message_utils] {tag} :: " + json.dumps(kw, ensure_ascii=False))

def send_message(chat_id: int | str, text: str, parse_mode: Optional[str] = None) -> None:
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram (‡∏ú‡πà‡∏≤‡∏ô utils.telegram_api)
    - ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ï‡∏±‡∏î‡∏ó‡∏µ‡πà 4096)
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö parse_mode ("HTML"/"MarkdownV2") ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    """
    token = _get_token()
    if not token:
        _log("WARN_NO_TOKEN", chat_id=chat_id, text_preview=text[:60])
        return
    payload_text = (text or "")[:4096]
    reply_markup = None  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    # telegram_api ‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå status/resp ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
    tg_send_message(chat_id, payload_text, reply_markup=reply_markup)

def send_photo(chat_id: int | str, photo_url: str, caption: Optional[str] = None) -> None:
    """
    ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ (‡∏ú‡πà‡∏≤‡∏ô utils.telegram_api)
    - ‡∏à‡∏≥‡∏Å‡∏±‡∏î caption ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î Telegram
    """
    token = _get_token()
    if not token:
        _log("WARN_NO_TOKEN", chat_id=chat_id, photo=photo_url[:80])
        return
    cap = (caption or "")[:1024]
    tg_send_photo(chat_id, photo_url, caption=cap)

def ask_for_location(chat_id: int | str, text: str = "üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì") -> None:
    """
    ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠ Location ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÅ‡∏ä‡∏£‡πå location
    """
    token = _get_token()
    if not token:
        _log("WARN_NO_TOKEN", chat_id=chat_id, action="ask_for_location")
        return
    keyboard: Dict[str, Any] = {
        "keyboard": [
            [{"text": "üìç ‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", "request_location": True}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    # ‡πÉ‡∏ä‡πâ tg_send_message ‡∏ï‡∏£‡∏á ‡πÜ ‡∏û‡∏£‡πâ‡∏≠‡∏° reply_markup
    # (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö reply_markup ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    from utils.telegram_api import _api_post  # ‡πÉ‡∏ä‡πâ low-level ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á reply_markup ‡πÑ‡∏î‡πâ
    _api_post("sendMessage", {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": keyboard,
        "parse_mode": "HTML",
    })
