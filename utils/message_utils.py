# utils/message_utils.py
# -*- coding: utf-8 -*-
"""
Thin wrapper ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÉ‡∏ï‡πâ‡∏ó‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ utils.telegram_api
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á TELEGRAM_BOT_TOKEN ‡πÅ‡∏•‡∏∞ TELEGRAM_TOKEN
- ‡∏°‡∏µ get_telegram_token() ‡πÅ‡∏ö‡∏ö public ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö parse_mode ("HTML" / "Markdown" / "MarkdownV2") ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
- ‡πÑ‡∏°‡πà raise error ‡∏ñ‡πâ‡∏≤ token ‡πÑ‡∏°‡πà‡∏°‡∏µ (log ‡πÅ‡∏•‡πâ‡∏ß return ‡πÄ‡∏â‡∏¢ ‡πÜ)
"""

from __future__ import annotations
from typing import Optional, Dict, Any
import os
import json

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å telegram_api (‡∏°‡∏µ log ‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß)
from utils.telegram_api import (
    send_message as tg_send_message,
    send_photo as tg_send_photo,
)
from utils.telegram_api import _api_post  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏≠‡∏á

ALLOWED_PARSE = {"HTML", "Markdown", "MarkdownV2"}


# ===== Token helpers =====
def get_telegram_token() -> str:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Telegram Bot Token ‡∏à‡∏≤‡∏Å ENV (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö TELEGRAM_BOT_TOKEN/TELEGRAM_TOKEN)
    - ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô import ‡πÑ‡∏î‡πâ (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤)
    """
    tok = (
        os.getenv("TELEGRAM_BOT_TOKEN")
        or os.getenv("TELEGRAM_TOKEN")
        or ""
    ).strip()
    if not tok:
        print("[message_utils] WARNING: Telegram token not set in TELEGRAM_BOT_TOKEN/TELEGRAM_TOKEN")
    return tok


def _log(tag: str, **kw):
    print(f"[message_utils] {tag} :: " + json.dumps(kw, ensure_ascii=False))


# ===== High-level senders =====
def send_message(
    chat_id: int | str,
    text: str,
    parse_mode: Optional[str] = None,
) -> None:
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram
    - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà 4096 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ parse_mode ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô "HTML" ‡∏à‡∏∞‡πÉ‡∏ä‡πâ tg_send_message (‡∏ã‡∏∂‡πà‡∏á default ‡πÄ‡∏õ‡πá‡∏ô HTML)
    - ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ parse_mode ‡∏≠‡∏∑‡πà‡∏ô ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô _api_post ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ parse_mode ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """
    token = get_telegram_token()
    if not token:
        _log("WARN_NO_TOKEN", chat_id=chat_id, text_preview=(text or "")[:80])
        return

    safe_text = (text or "")[:4096]
    try:
        if parse_mode and parse_mode in ALLOWED_PARSE and parse_mode != "HTML":
            # ‡∏£‡∏∞‡∏ö‡∏∏ parse_mode ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ default
            _api_post("sendMessage", {
                "chat_id": chat_id,
                "text": safe_text,
                "parse_mode": parse_mode,
                "disable_web_page_preview": True,
            })
        else:
            # ‡πÉ‡∏ä‡πâ helper ‡∏õ‡∏Å‡∏ï‡∏¥ (default ‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô telegram_api)
            tg_send_message(chat_id, safe_text, reply_markup=None)
    except Exception as e:
        _log("ERROR_SEND_MESSAGE", err=str(e))


def send_photo(
    chat_id: int | str,
    photo_url: str,
    caption: Optional[str] = None,
) -> None:
    """
    ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ Telegram
    - ‡∏à‡∏≥‡∏Å‡∏±‡∏î caption ~1024 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î Telegram
    """
    token = get_telegram_token()
    if not token:
        _log("WARN_NO_TOKEN", chat_id=chat_id, photo=photo_url[:120])
        return

    cap = (caption or "")[:1024]
    try:
        tg_send_photo(chat_id, photo_url, caption=cap)
    except Exception as e:
        _log("ERROR_SEND_PHOTO", err=str(e))


def ask_for_location(
    chat_id: int | str,
    text: str = "üìç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
) -> None:
    """
    ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠ Location ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÅ‡∏ä‡∏£‡πå location
    """
    token = get_telegram_token()
    if not token:
        _log("WARN_NO_TOKEN", chat_id=chat_id, action="ask_for_location")
        return

    keyboard: Dict[str, Any] = {
        "keyboard": [[{"text": "üìç ‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", "request_location": True}]],
        "resize_keyboard": True,
        "one_time_keyboard": True,
    }
    try:
        _api_post("sendMessage", {
            "chat_id": chat_id,
            "text": text,
            "reply_markup": keyboard,
            "parse_mode": "HTML",
        })
    except Exception as e:
        _log("ERROR_ASK_LOCATION", err=str(e))
