# utils/bot_profile.py
# -*- coding: utf-8 -*-
"""
Manages the bot's personality, including its name, gender, and tone.
"""
import json
import os
import re

PROFILE_FILE = "data/bot_profile.json"

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå "‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢" ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
DEFAULT_PROFILE = {
    "gender": "male",
    "nickname": "‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢",
    "self_pronoun": "‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢", # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "‡∏ú‡∏°" ‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å
    "default_user_pronoun": "‡∏Ñ‡∏∏‡∏ì"
}

def get_bot_profile():
    """Loads the bot's profile from a JSON file, or creates it if it doesn't exist."""
    try:
        if not os.path.exists(PROFILE_FILE):
            set_bot_profile(**DEFAULT_PROFILE)
        with open(PROFILE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return DEFAULT_PROFILE

def set_bot_profile(**kwargs):
    """Updates and saves the bot's profile."""
    profile = get_bot_profile()
    profile.update(kwargs)
    os.makedirs(os.path.dirname(PROFILE_FILE), exist_ok=True)
    with open(PROFILE_FILE, "w", encoding="utf-8") as f:
        json.dump(profile, f, ensure_ascii=False, indent=2)

def bot_intro():
    """Generates the bot's standard introduction message."""
    # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    profile = get_bot_profile()
    return (
        f"‡πÇ‡∏Æ‡πà‡∏á! {profile['nickname']}‡∏°‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! "
        f"‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ{profile['nickname']}‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ ‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üêæ"
    )

def adjust_bot_tone(text: str) -> str:
    """
    Adjusts the bot's tone to be consistently male and polite ("‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢").
    Ensures text ends with "‡∏Ñ‡∏£‡∏±‡∏ö" and uses the correct pronouns.
    """
    if not text:
        return ""
    
    # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢" ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏†‡∏≤‡∏û
    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏â‡∏±‡∏ô", "‡∏î‡∏¥‡∏â‡∏±‡∏ô", "‡∏´‡∏ô‡∏π", "‡πÄ‡∏£‡∏≤", "‡∏ú‡∏°" ‡∏î‡πâ‡∏ß‡∏¢ "‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢"
    pronoun_pattern = r'\b(‡∏â‡∏±‡∏ô|‡∏î‡∏¥‡∏â‡∏±‡∏ô|‡∏´‡∏ô‡∏π|‡πÄ‡∏£‡∏≤|‡∏ú‡∏°)\b'
    text = re.sub(pronoun_pattern, '‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πâ‡∏≠‡∏¢', text)

    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ô‡∏∞‡∏Ñ‡∏∞/‡∏Ñ‡∏∞/‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡∏£‡∏±‡∏ö
    text = text.replace("‡∏Ñ‡πà‡∏∞", "‡∏Ñ‡∏£‡∏±‡∏ö").replace("‡∏Ñ‡∏∞", "‡∏Ñ‡∏£‡∏±‡∏ö").replace("‡∏ô‡∏∞‡∏Ñ‡∏∞", "‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ "‡∏Ñ‡∏£‡∏±‡∏ö" ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if not text.endswith(("‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡∏£‡πâ‡∏≤‡∏ö", "‡∏Ñ‡πâ‡∏≤‡∏ö")):
        # ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ
        text = text.rstrip('.!?')
        text += " ‡∏Ñ‡∏£‡∏±‡∏ö"
        
    return text
