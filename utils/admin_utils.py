# utils/admin_utils.py
# -*- coding: utf-8 -*-
"""
Admin utilities (final, robust)
- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ Super Admin ‡∏à‡∏≤‡∏Å ENV: SUPER_ADMIN_IDS="604990227,123456789"
- ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å Super Admin
- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏£‡∏∞‡∏á‡∏±‡∏ö/‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å handlers.admin ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
"""

from __future__ import annotations
from typing import Dict, Any, Iterable, Optional
import os

from utils.memory_store import (
    get_all_users,
    update_user_status,
    get_user_by_id,
)
from utils.telegram_api import send_message


# ---------- Super Admins ----------

def _load_super_admin_ids() -> set[int]:
    env = (os.getenv("SUPER_ADMIN_IDS") or "").strip()
    if not env:
        # fallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
        legacy = os.getenv("SUPER_ADMIN_ID")
        if legacy:
            try:
                return {int(legacy)}
            except ValueError:
                pass
        return set()

    ids: set[int] = set()
    for tok in env.replace(";", ",").split(","):
        tok = tok.strip()
        if not tok:
            continue
        try:
            ids.add(int(tok))
        except ValueError:
            # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏ú‡∏•‡∏≠‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô @username ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
            pass
    return ids


SUPER_ADMIN_IDS: set[int] = _load_super_admin_ids()


def is_super_admin(user_id: int) -> bool:
    return int(user_id) in SUPER_ADMIN_IDS


# ---------- Helpers ----------

def _broadcast_to_admins(text: str, parse_mode: Optional[str] = "Markdown") -> None:
    if not SUPER_ADMIN_IDS:
        print("[Admin] SUPER_ADMIN_IDS not set. Skip broadcast.")
        return
    for admin_id in SUPER_ADMIN_IDS:
        try:
            send_message(admin_id, text, parse_mode=parse_mode)
        except Exception as e:
            print(f"[Admin] failed to notify {admin_id}: {e}")


def _find_user_id_by_username(username: str) -> Optional[int]:
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user_id ‡∏à‡∏≤‡∏Å @username (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà @ ‡∏Å‡πá‡πÑ‡∏î‡πâ)"""
    uname = username.lstrip("@").lower()
    for u in get_all_users():
        if (u.get("username") or "").lower() == uname:
            return int(u["user_id"])
    return None


def _parse_target_identifier(arg: str) -> Optional[int]:
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô user_id:
    - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç -> ‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô user_id
    - @username ‡∏´‡∏£‡∏∑‡∏≠ username -> ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """
    arg = (arg or "").strip()
    if not arg:
        return None
    try:
        return int(arg)
    except ValueError:
        return _find_user_id_by_username(arg)


# ---------- Notifications ----------

def notify_super_admin_for_approval(new_user_data: Dict[str, Any]) -> None:
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Super Admin ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å main_handler ‡∏ï‡∏≠‡∏ô‡πÄ‡∏à‡∏≠ status new_user_pending/pending
    """
    if not SUPER_ADMIN_IDS:
        print("[Admin] SUPER_ADMIN_IDS not set. Cannot send approval notification.")
        return

    user_id = new_user_data.get("id")
    first_name = new_user_data.get("first_name", "")
    username = new_user_data.get("username", "N/A")

    # ‡πÉ‡∏ä‡πâ backticks ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô Markdown ‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ underscore
    msg = (
        "üîî **‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥** üîî\n\n"
        f"**‡∏ä‡∏∑‡πà‡∏≠:** {first_name}\n"
        f"**Username:** `@{username}`\n"
        f"**User ID:** `{user_id}`\n\n"
        "‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n"
        f"‚Ä¢ `/admin approve {user_id}` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥\n"
        f"‚Ä¢ `/admin remove {user_id}` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏á‡∏±‡∏ö\n"
        "‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô `@username` ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö"
    )
    _broadcast_to_admins(msg, parse_mode="Markdown")


# ---------- Core admin actions ----------

def approve_user(target_user_id: int) -> str:
    """‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏£‡∏±‡∏ö user_id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"""
    if update_user_status(target_user_id, "approved"):
        try:
            send_message(
                target_user_id,
                "üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß\n‡∏û‡∏¥‡∏°‡∏û‡πå /help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
            )
        except Exception as e:
            print(f"[Admin] notify approved user failed: {e}")
        return f"‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: {target_user_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"
    return f"‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: {target_user_id} ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"


def approve_user_by_identifier(identifier: str) -> str:
    """‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å id ‡∏´‡∏£‡∏∑‡∏≠ @username ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô handler"""
    uid = _parse_target_identifier(identifier)
    if uid is None:
        return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô user_id ‡∏´‡∏£‡∏∑‡∏≠ @username ‡∏Ñ‡∏£‡∏±‡∏ö"
    return approve_user(uid)


def remove_user(target_user_id: int) -> str:
    """‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏£‡∏±‡∏ö user_id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)"""
    if update_user_status(target_user_id, "removed"):
        try:
            send_message(target_user_id, "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
        except Exception as e:
            print(f"[Admin] notify removed user failed: {e}")
        prof = get_user_by_id(target_user_id) or {}
        name = prof.get("first_name", "") or ""
        return f"üö´ ‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: {target_user_id} ({name}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"
    return f"‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: {target_user_id} ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ñ‡∏£‡∏±‡∏ö"


def remove_user_by_identifier(identifier: str) -> str:
    uid = _parse_target_identifier(identifier)
    if uid is None:
        return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô user_id ‡∏´‡∏£‡∏∑‡∏≠ @username ‡∏Ñ‡∏£‡∏±‡∏ö"
    return remove_user(uid)


def list_all_users() -> str:
    """‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    users = get_all_users()
    if not users:
        return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"

    icon = {"approved": "‚úÖ", "pending": "‚è≥", "removed": "‚ùå"}
    lines = ["**‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:**"]
    for u in users:
        status = u.get("status") or ""
        lines.append(
            f"{icon.get(status, '‚ùì')} `{u['user_id']}` - {u.get('first_name','')}"
            f" (@{u.get('username','')}) [{u.get('role','')}]"
        )
    return "\n".join(lines)
