# utils/report_utils.py
# -*- coding: utf-8 -*-
"""
Utility ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£/‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
- ‡πÉ‡∏ä‡πâ _get_db_connection() ‡∏à‡∏≤‡∏Å utils.memory_store
- ‡∏ï‡∏±‡πâ‡∏á row_factory = sqlite3.Row ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö dict ‡πÑ‡∏î‡πâ
- ‡∏Ñ‡∏£‡∏≠‡∏ö try/fallback ‡∏Å‡∏£‡∏ì‡∏µ schema ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á (JOIN ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÉ‡∏ä‡πâ fallback ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà JOIN)
- ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Markdown ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏±‡∏ö Telegram (Markdown v1)

Sections ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:
1) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î / ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ / ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 7 ‡∏ß‡∏±‡∏ô / ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏µ‡∏ß‡∏¥‡∏ß 7 ‡∏ß‡∏±‡∏ô
2) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 7 ‡∏ß‡∏±‡∏ô) ‚Äî ‡∏°‡∏µ fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
3) ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Äî ‡∏°‡∏µ fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users

‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ argument days (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 7)
"""

from __future__ import annotations
from typing import Any, List, Tuple
import datetime
import sqlite3

# ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ô‡∏Ñ‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å memory_store
from utils.memory_store import _get_db_connection


# ---------- Helpers ----------
def _now_ts() -> int:
    return int(datetime.datetime.now().timestamp())

def _ts_days_ago(days: int) -> int:
    return int((datetime.datetime.now() - datetime.timedelta(days=days)).timestamp())

def _fmt_int(v: Any, default: int = 0) -> int:
    try:
        return int(v)
    except Exception:
        return default

def _fmt_float(v: Any, digits: int = 2) -> str:
    try:
        if v is None:
            return "-"
        return f"{float(v):.{digits}f}"
    except Exception:
        return "-"

def _stars(n: Any) -> str:
    try:
        i = max(0, min(5, int(n)))
        return "‚≠ê" * i if i > 0 else "‚Äî"
    except Exception:
        return "‚Äî"


# ---------- Core builder ----------
def get_system_report(days: int = 7) -> str:
    """
    ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ä‡πà‡∏ß‡∏á N ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 7 ‡∏ß‡∏±‡∏ô) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô string ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡πÉ‡∏ô Telegram (Markdown)
    """
    since_ts = _ts_days_ago(days)
    until_ts = _now_ts()
    range_text = (
        f"{datetime.datetime.fromtimestamp(since_ts).strftime('%Y-%m-%d')} "
        f"‡∏ñ‡∏∂‡∏á {datetime.datetime.fromtimestamp(until_ts).strftime('%Y-%m-%d')}"
    )

    try:
        with _get_db_connection() as conn:
            # ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ (row["col"])
            try:
                conn.row_factory = sqlite3.Row
            except Exception:
                pass
            cur = conn.cursor()

            # ---------- 1) Users / Messages / Avg rating ----------
            total_users = 0
            try:
                cur.execute("SELECT COUNT(*) AS c FROM users")
                row = cur.fetchone()
                total_users = _fmt_int(row["c"] if row and "c" in row.keys() else (row[0] if row else 0), 0)
            except Exception:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÑ‡∏õ
                total_users = 0

            active_users_7d = 0
            try:
                cur.execute(
                    "SELECT COUNT(DISTINCT user_id) AS c FROM messages WHERE timestamp >= ?",
                    (since_ts,),
                )
                row = cur.fetchone()
                active_users_7d = _fmt_int(row["c"] if row and "c" in row.keys() else (row[0] if row else 0), 0)
            except Exception:
                active_users_7d = 0

            messages_7d = 0
            try:
                cur.execute(
                    "SELECT COUNT(*) AS c FROM messages WHERE timestamp >= ?",
                    (since_ts,),
                )
                row = cur.fetchone()
                messages_7d = _fmt_int(row["c"] if row and "c" in row.keys() else (row[0] if row else 0), 0)
            except Exception:
                messages_7d = 0

            avg_rating_7d = "-"
            try:
                cur.execute(
                    "SELECT AVG(rating) AS avg_r FROM reviews WHERE timestamp >= ?",
                    (since_ts,),
                )
                row = cur.fetchone()
                avg_rating_7d = _fmt_float(row["avg_r"] if row and "avg_r" in row.keys() else (row[0] if row else None), 2)
            except Exception:
                avg_rating_7d = "-"

            # ---------- 2) Top users (7 ‡∏ß‡∏±‡∏ô) ----------
            top_users: List[sqlite3.Row] = []
            try:
                cur.execute(
                    """
                    SELECT u.first_name AS first_name,
                           COUNT(m.message_id) AS msg_count
                    FROM messages m
                    JOIN users u ON m.user_id = u.user_id
                    WHERE m.timestamp >= ?
                    GROUP BY m.user_id
                    ORDER BY msg_count DESC
                    LIMIT 5
                    """,
                    (since_ts,),
                )
                top_users = cur.fetchall() or []
            except Exception:
                # Fallback: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‚Üí ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user_id ‡∏•‡πâ‡∏ß‡∏ô
                try:
                    cur.execute(
                        """
                        SELECT m.user_id AS user_id,
                               COUNT(m.message_id) AS msg_count
                        FROM messages m
                        WHERE m.timestamp >= ?
                        GROUP BY m.user_id
                        ORDER BY msg_count DESC
                        LIMIT 5
                        """,
                        (since_ts,),
                    )
                    rows = cur.fetchall() or []
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÄ‡∏î‡∏¥‡∏°
                    top_users = []
                    for r in rows:
                        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á Row ‡∏î‡πâ‡∏ß‡∏¢ dict (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö row["first_name"])
                        first_name = f"UID {r['user_id']}" if isinstance(r, sqlite3.Row) else f"UID {r[0]}"
                        msg_count = (r["msg_count"] if isinstance(r, sqlite3.Row) else r[1])
                        top_users.append({"first_name": first_name, "msg_count": msg_count})  # type: ignore
                except Exception:
                    top_users = []

            # ---------- 3) Recent reviews ----------
            recent_reviews: List[sqlite3.Row] = []
            try:
                cur.execute(
                    """
                    SELECT u.first_name AS first_name,
                           r.rating       AS rating
                    FROM reviews r
                    JOIN users   u ON r.user_id = u.user_id
                    ORDER BY r.timestamp DESC
                    LIMIT 5
                    """
                )
                recent_reviews = cur.fetchall() or []
            except Exception:
                # Fallback: ‡πÑ‡∏°‡πà‡∏°‡∏µ users ‚Üí ‡πÄ‡∏≠‡∏≤ user_id ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ó‡∏ô
                try:
                    cur.execute(
                        """
                        SELECT user_id, rating
                        FROM reviews
                        ORDER BY timestamp DESC
                        LIMIT 5
                        """
                    )
                    rows = cur.fetchall() or []
                    recent_reviews = []
                    for r in rows:
                        if isinstance(r, sqlite3.Row):
                            recent_reviews.append({"first_name": f"UID {r['user_id']}", "rating": r["rating"]})  # type: ignore
                        else:
                            recent_reviews.append({"first_name": f"UID {r[0]}", "rating": r[1]})  # type: ignore
                except Exception:
                    recent_reviews = []

            # ---------- Compose Markdown ----------
            lines: List[str] = []
            lines.append("üìä **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö**")
            lines.append(f"_‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•_: {range_text}")
            lines.append("---------------------------------")
            lines.append(f"üë• **‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:** {total_users} ‡∏Ñ‡∏ô")
            lines.append(f"üü¢ **‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô {days} ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {active_users_7d} ‡∏Ñ‡∏ô")
            lines.append(f"üí¨ **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° {days} ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {messages_7d} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            lines.append(f"üåü **‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏µ‡∏ß‡∏¥‡∏ß {days} ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {avg_rating_7d}")
            lines.append("---------------------------------")

            lines.append("üèÜ **‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á)**")
            if top_users:
                for i, row in enumerate(top_users, 1):
                    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á sqlite3.Row ‡πÅ‡∏•‡∏∞ dict fallback
                    if isinstance(row, sqlite3.Row):
                        name = row["first_name"] if "first_name" in row.keys() else (row["user_id"] if "user_id" in row.keys() else "‚Äî")
                        cnt  = row["msg_count"] if "msg_count" in row.keys() else 0
                    else:
                        name = row.get("first_name") if isinstance(row, dict) else "‚Äî"  # type: ignore
                        cnt  = row.get("msg_count", 0) if isinstance(row, dict) else 0  # type: ignore
                    lines.append(f"{i}. ‡∏Ñ‡∏∏‡∏ì {name} ({_fmt_int(cnt)} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)")
            else:
                lines.append("- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            lines.append("---------------------------------")

            lines.append("üìù **‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£**")
            if recent_reviews:
                for r in recent_reviews:
                    if isinstance(r, sqlite3.Row):
                        name = r["first_name"] if "first_name" in r.keys() else (r["user_id"] if "user_id" in r.keys() else "‚Äî")
                        rating = r["rating"] if "rating" in r.keys() else None
                    else:
                        name = r.get("first_name", "‚Äî") if isinstance(r, dict) else "‚Äî"  # type: ignore
                        rating = r.get("rating") if isinstance(r, dict) else None      # type: ignore
                    lines.append(f"- {_stars(rating)} ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∏‡∏ì {name}")
            else:
                lines.append("- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß")

            return "\n".join(lines)

    except Exception as e:
        print(f"[Report_Utils] error: {e}")
        return "‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
