# weather_utils.py
"""
Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏™‡∏±‡πâ‡∏ô ‡πÜ) ‡∏à‡∏≤‡∏Å OpenWeatherMap
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á lat/lon ‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô text
"""

import os
import requests
from datetime import datetime, timezone
from typing import Optional, Tuple

OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

# ---------------------------
# Public API
# ---------------------------

def get_weather_forecast(
    text: Optional[str] = None,
    lat:   Optional[float] = None,
    lon:   Optional[float] = None,
    units: str = "metric",
    lang:  str = "th"
) -> str:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ß‡∏¢ ‡πÜ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
    - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ lat/lon ‡∏à‡∏∞‡πÉ‡∏ä‡πâ onecall ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ lat/lon ‡∏à‡∏∞‡∏•‡∏≠‡∏á parse ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å text ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏´‡∏≤ lat/lon ‡∏ú‡πà‡∏≤‡∏ô /geo
    """
    if not OPENWEATHER_API_KEY:
        return "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OPENWEATHER_API_KEY"

    try:
        if (lat is None or lon is None):
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á lat/lon ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á)
            city = _extract_city_from_text(text)
            if not city:
                return "‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏ä‡∏£‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î (location) ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á/‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏£‡∏π‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
            lat, lon = _geocode_city(city)
            if lat is None or lon is None:
                return f"‚ùå ‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á '{city}' ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö OpenWeather"

        data = _call_onecall_api(lat, lon, units=units, lang=lang)
        if not data:
            return "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

        return _format_weather_message(data, units)
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: {e}"


# ---------------------------
# Internal helpers
# ---------------------------

def _extract_city_from_text(text: Optional[str]) -> Optional[str]:
    """
    ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô "‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á"
    ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö regex ‡πÉ‡∏´‡πâ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    """
    if not text:
        return None
    text = text.strip()
    # ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
    # ‡πÄ‡∏Ñ‡∏™‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û", "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà"
    for token in ["‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà", "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "‡∏ó‡∏µ‡πà", "weather", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"]:
        text = text.replace(token, "")
    text = text.strip()
    return text if text else None


def _geocode_city(city: str) -> Tuple[Optional[float], Optional[float]]:
    """
    ‡πÉ‡∏ä‡πâ OpenWeather Geo API ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î lat/lon ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á
    """
    url = "http://api.openweathermap.org/geo/1.0/direct"
    params = {
        "q": city,
        "appid": OPENWEATHER_API_KEY,
        "limit": 1
    }
    r = requests.get(url, params=params, timeout=10)
    if not r.ok:
        return None, None
    arr = r.json()
    if not arr:
        return None, None
    return arr[0].get("lat"), arr[0].get("lon")


def _call_onecall_api(lat: float, lon: float, units: str = "metric", lang: str = "th") -> dict:
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å One Call API 3.0 (‡∏´‡∏£‡∏∑‡∏≠ 2.5 ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤)
    """
    url = "https://api.openweathermap.org/data/3.0/onecall"
    params = {
        "lat": lat,
        "lon": lon,
        "appid": OPENWEATHER_API_KEY,
        "units": units,
        "lang": lang,
        "exclude": "minutely,alerts"  # ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
    }
    r = requests.get(url, params=params, timeout=12)
    if not r.ok:
        return {}
    return r.json()


def _format_weather_message(data: dict, units: str) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• onecall
    """
    current = data.get("current", {})
    hourly  = data.get("hourly", [])[:6]   # 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    daily   = data.get("daily", [])[:3]    # 3 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤

    unit_temp = "¬∞C" if units == "metric" else "¬∞F"

    # ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    temp_now = current.get("temp")
    desc_now = _first_weather_desc(current)
    icon_now = _icon_from_desc(desc_now)
    feels    = current.get("feels_like")
    humidity = current.get("humidity")
    wind     = current.get("wind_speed")

    msg = []
    msg.append(f"‚õÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ\n{icon_now} {desc_now.capitalize()}  {temp_now:.1f}{unit_temp} (‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å {feels:.1f}{unit_temp})")
    msg.append(f"üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô {humidity}%  | üí® ‡∏•‡∏° {wind} m/s")

    # ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    if hourly:
        msg.append("\nüïí 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        for h in hourly:
            t   = _ts_to_local(h.get("dt"))
            td  = h.get("temp")
            dsc = _first_weather_desc(h)
            ic  = _icon_from_desc(dsc)
            msg.append(f"‚Ä¢ {t:%H:%M}  {ic} {dsc}  {td:.0f}{unit_temp}")

    # ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    if daily:
        msg.append("\nüìÖ 3 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤")
        for d in daily:
            t   = _ts_to_local(d.get("dt"))
            temp_d = d.get("temp", {})
            tmin = temp_d.get("min")
            tmax = temp_d.get("max")
            dsc = _first_weather_desc(d)
            ic  = _icon_from_desc(dsc)
            msg.append(f"‚Ä¢ {t:%a %d/%m}  {ic} {dsc}  {tmin:.0f}-{tmax:.0f}{unit_temp}")

    return "\n".join(msg)


def _first_weather_desc(block: dict) -> str:
    """‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å"""
    we = block.get("weather", [])
    if we:
        return we[0].get("description", "")
    return ""


def _icon_from_desc(desc: str) -> str:
    """
    map ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ -> ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ
    """
    desc = desc.lower()
    if any(k in desc for k in ["rain", "‡∏ù‡∏ô"]):
        return "üåßÔ∏è"
    if any(k in desc for k in ["storm", "‡∏û‡∏≤‡∏¢‡∏∏", "thunder"]):
        return "‚õàÔ∏è"
    if any(k in desc for k in ["cloud", "‡πÄ‡∏°‡∏Ü"]):
        return "‚òÅÔ∏è"
    if any(k in desc for k in ["snow", "‡∏´‡∏¥‡∏°‡∏∞"]):
        return "‚ùÑÔ∏è"
    if any(k in desc for k in ["clear", "‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™"]):
        return "‚òÄÔ∏è"
    return "üå§Ô∏è"


def _ts_to_local(ts: int) -> datetime:
    """
    ‡πÅ‡∏õ‡∏•‡∏á UNIX ts -> datetime local (‡πÉ‡∏ä‡πâ timezone ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô onecall ‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ
    ‡πÅ‡∏ï‡πà onecall 3.0 ‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô offset ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ tz=UTC ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
    ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ UTC+7 ‡πÅ‡∏ö‡∏ö‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏Ñ‡πâ‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ
    """
    # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ +7 ‡∏ä‡∏±‡∏ß‡∏£‡πå ‡πÜ
    return datetime.fromtimestamp(ts, tz=timezone.utc).astimezone()
