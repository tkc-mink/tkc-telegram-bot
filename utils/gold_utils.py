import os
import re
import requests
from bs4 import BeautifulSoup
from typing import Dict, Optional, Tuple

# ------------------- HTTP session with retry -------------------
from requests.adapters import HTTPAdapter
try:
    # urllib3 <2 / =2 friendly import
    from urllib3.util.retry import Retry  # type: ignore
except Exception:
    Retry = None

def _build_session(timeout: int = 10, retries: int = 2, backoff: float = 0.5) -> requests.Session:
    s = requests.Session()
    if Retry is not None:
        retry = Retry(
            total=retries,
            read=retries,
            connect=retries,
            backoff_factor=backoff,
            status_forcelist=(429, 500, 502, 503, 504),
            allowed_methods=frozenset(["GET"]),
            raise_on_status=False,
        )
        adapter = HTTPAdapter(max_retries=retry)
        s.mount("https://", adapter)
        s.mount("http://", adapter)
    # default timeout wrapper
    orig_req = s.request
    def _req(method, url, **kwargs):
        if "timeout" not in kwargs:
            kwargs["timeout"] = timeout
        return orig_req(method, url, **kwargs)
    s.request = _req  # type: ignore
    return s

# ------------------- Text helpers -------------------
_TH2AR = str.maketrans("‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô", "0123456789")

def _clean_num(txt: str) -> str:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô '38,100.00'
    ‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏•‡∏Ç‡πÑ‡∏ó‡∏¢/‡∏≠‡∏≤‡∏£‡∏ö‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏≠‡∏≠‡∏Å
    """
    if not txt:
        return ""
    t = txt.strip().translate(_TH2AR)
    # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏à‡∏∏‡∏î ‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤
    t = re.sub(r"[^0-9\.,]", "", t)
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô parse ‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ)
    if t.count(".") > 1:
        t = t.replace(".", "")
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô
    try:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏∏‡∏î -> ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
        if "." in t:
            val = float(t.replace(",", ""))
            return f"{val:,.2f}"
        else:
            val = int(float(t.replace(",", "")))
            return f"{val:,}"
    except Exception:
        return t

def _find_updated_text(soup: BeautifulSoup) -> Optional[str]:
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà", "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà", "Last update"
    text = soup.get_text(" ", strip=True)
    m = re.search(r"(‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï|‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó|‡∏õ‡∏£‡∏±‡∏ö(?:‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà)?|Last\s*update).*?(\d{1,2}[:.]\d{2}).*?(‡∏ô\.|AM|PM)?", text, re.IGNORECASE)
    if m:
        return m.group(0)
    # ‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà dd/mm/yyyy ‡πÄ‡∏ß‡∏•‡∏≤ hh:mm ‡∏ô."
    m = re.search(r"(‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô|‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà|‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà).*?\d{1,2}\/\d{1,2}\/\d{2,4}.*?\d{1,2}[:.]\d{2}", text)
    if m:
        return m.group(0)
    return None

def _parse_goldtraders(html: str) -> Tuple[Optional[str], Dict[str, str]]:
    """
    ‡∏Ñ‡∏∑‡∏ô (updated_text, prices_dict)
    prices_dict keys: bar_buy, bar_sell, ornament_buy, ornament_sell
    """
    soup = BeautifulSoup(html, "html.parser")
    updated = _find_updated_text(soup)

    prices = {"bar_buy": "", "bar_sell": "", "ornament_buy": "", "ornament_sell": ""}

    # 1) ‡πÇ‡∏Ñ‡∏£‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ class="table-price"
    table = soup.find("table", class_="table-price")
    if table:
        for row in table.find_all("tr"):
            cols = [c.get_text(strip=True) for c in row.find_all(["td", "th"])]
            if len(cols) >= 3:
                name = cols[0]
                buy  = _clean_num(cols[1])
                sell = _clean_num(cols[2])
                if "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á" in name:
                    prices["bar_buy"] = buy or prices["bar_buy"]
                    prices["bar_sell"] = sell or prices["bar_sell"]
                elif "‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì" in name:
                    prices["ornament_buy"] = buy or prices["ornament_buy"]
                    prices["ornament_sell"] = sell or prices["ornament_sell"]

    # 2) ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ö‡∏≤‡∏á‡∏ò‡∏µ‡∏°‡∏õ‡∏£‡∏±‡∏ö class ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‚Äî ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ö‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤
    text_tables = soup.find_all("table")
    if not any(prices.values()):
        for t in text_tables:
            txt = t.get_text(" ", strip=True)
            if ("‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á" in txt or "‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì" in txt) and ("‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠" in txt or "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å" in txt):
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á
                for row in t.find_all("tr"):
                    line = row.get_text(" ", strip=True)
                    if "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á" in line:
                        m = re.findall(r"(\d[\d,\.]*)", line.translate(_TH2AR))
                        if len(m) >= 2:
                            prices["bar_buy"]  = _clean_num(m[0])
                            prices["bar_sell"] = _clean_num(m[1])
                    if "‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì" in line:
                        m = re.findall(r"(\d[\d,\.]*)", line.translate(_TH2AR))
                        if len(m) >= 2:
                            prices["ornament_buy"]  = _clean_num(m[0])
                            prices["ornament_sell"] = _clean_num(m[1])

    # 3) ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡∏•‡∏≠‡∏á‡∏î‡∏π span/div ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà ‡πÜ
    if not any(prices.values()):
        blocks = soup.find_all(["div", "span", "li", "p"])
        for b in blocks:
            line = b.get_text(" ", strip=True)
            if "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á" in line and ("‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠" in line or "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å" in line):
                m = re.findall(r"(\d[\d,\.]*)", line.translate(_TH2AR))
                if len(m) >= 2:
                    prices["bar_buy"]  = _clean_num(m[0])
                    prices["bar_sell"] = _clean_num(m[1])
            if "‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì" in line and ("‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠" in line or "‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å" in line):
                m = re.findall(r"(\d[\d,\.]*)", line.translate(_TH2AR))
                if len(m) >= 2:
                    prices["ornament_buy"]  = _clean_num(m[0])
                    prices["ornament_sell"] = _clean_num(m[1])

    return updated, prices

def _format_msg_from_gta(updated: Optional[str], p: Dict[str, str]) -> Optional[str]:
    lines = []
    if any(p.values()):
        lines.append("üìÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)")
        if updated:
            lines.append(f"‚Ä¢ {updated}")
        if p.get("bar_buy") or p.get("bar_sell"):
            lines.append(f"‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á: ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ {p.get('bar_buy','-')} / ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {p.get('bar_sell','-')} ‡∏ö‡∏≤‡∏ó")
        if p.get("ornament_buy") or p.get("ornament_sell"):
            lines.append(f"‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì: ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ {p.get('ornament_buy','-')} / ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å {p.get('ornament_sell','-')} ‡∏ö‡∏≤‡∏ó")
        lines.append("")
        lines.append("‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: https://www.goldtraders.or.th/")
        return "\n".join(lines)
    return None

# ------------------- Public API -------------------
def get_gold_price() -> str:
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ ‡∏ñ‡πâ‡∏≤ scrape ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞ fallback GoldAPI.io)
    """
    # ---------- 1) Scrape ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏Ñ‡πâ‡∏≤‡∏ó‡∏≠‡∏á ----------
    try:
        session = _build_session(timeout=10, retries=2, backoff=0.6)
        url = "https://www.goldtraders.or.th/"
        headers = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
                          "(KHTML, like Gecko) Chrome/126.0 Safari/537.36",
            "Accept-Language": "th-TH,th;q=0.9,en;q=0.8",
        }
        resp = session.get(url, headers=headers)
        if resp.status_code == 200 and resp.text:
            updated, prices = _parse_goldtraders(resp.text)
            msg = _format_msg_from_gta(updated, prices)
            if msg:
                return msg
        else:
            print(f"[gold_utils] goldtraders http {resp.status_code}")
    except Exception as e:
        print(f"[gold_utils] error goldtraders: {e}")

    # ---------- 2) Fallback ‡πÑ‡∏õ GoldAPI.io (spot) ----------
    GOLD_API_KEY = os.getenv("GOLDAPI_KEY")
    if GOLD_API_KEY:
        url = "https://www.goldapi.io/api/XAU/THB"
        headers = {"x-access-token": GOLD_API_KEY, "Content-Type": "application/json"}
        try:
            session = _build_session(timeout=10, retries=2, backoff=0.6)
            resp = session.get(url, headers=headers)
            if resp.status_code == 200:
                data = resp.json()
                price = data.get("price")
                if price:
                    # 1 ‡∏≠‡∏≠‡∏ô‡∏ã‡πå ‚âà 31.1035 ‡∏Å‡∏£‡∏±‡∏°, 1 ‡∏ö‡∏≤‡∏ó‡∏ó‡∏≠‡∏á (‡πÑ‡∏ó‡∏¢) ‚âà 15.244 ‡∏Å‡∏£‡∏±‡∏°
                    price_per_gram = float(price) / 31.1035
                    price_per_baht = price_per_gram * 15.244
                    # ‡∏õ‡∏±‡∏î‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö (‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î‡∏ä‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô)
                    price_per_baht = int(price_per_baht // 10 * 10)
                    return (
                        "üìÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (Spot XAU/THB ‡∏à‡∏≤‡∏Å GoldAPI.io)\n"
                        f"‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å ~ {price_per_baht:,} ‡∏ö‡∏≤‡∏ó/‡∏ö‡∏≤‡∏ó‡∏ó‡∏≠‡∏á\n"
                        "(‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å spot ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡πÄ‡∏´‡∏ô‡πá‡∏à/‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢)\n"
                        "‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢: https://www.goldtraders.or.th/"
                    )
            else:
                print(f"[gold_utils] GoldAPI http {resp.status_code}: {resp.text[:200]}")
        except Exception as e:
            print(f"[gold_utils] GoldAPI error: {e}")

    # ---------- 3) Fallback mock ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ api key ‡∏´‡∏£‡∏∑‡∏≠ error ----------
    return (
        "üìÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)\n"
        "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ó‡πà‡∏á: ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ 38,000 / ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å 38,100 ‡∏ö‡∏≤‡∏ó\n"
        "‡∏ó‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì: ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ 37,500 / ‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å 38,600 ‡∏ö‡∏≤‡∏ó"
    )
